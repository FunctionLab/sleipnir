name: Build and Run Tests

on: [pull_request, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install C/C++ Libraries
      run: |
        sudo apt-get update
        sudo apt-get install build-essential
        sudo apt-get install libsvm-dev
        sudo apt-get install libomp-dev
        sudo apt-get install libthrift-dev
        sudo apt-get install libgsl-dev
        sudo apt-get install libboost-dev
        sudo apt-get install libboost-graph-dev
        sudo apt-get install libboost-regex-dev
        sudo apt-get install libreadline-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/${{env.BUILD_TYPE}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/${{env.BUILD_TYPE}} --config ${{env.BUILD_TYPE}}

    - name: Run C++ Tests
      working-directory: ${{github.workspace}}/${{env.BUILD_TYPE}}
      # Execute c++ based tests
      run: tests/unit_tests

    - name: Add conda to system path
      # Miniconda is already installed on Github Actions runners
      # $CONDA is an environment variable pointing to the root of the
      #   miniconda directory.
      run: |
        echo $CONDA/bin >> $GITHUB_PATH

    - name: Install Python Test Dependencies
      working-directory: ${{github.workspace}}
      # Install python libraries to "base" conda env which is used by default
      run: |
        conda env update --name base --file scripts/seek/conda_environment.yml

    - name: Load SampleBC Cache
      # Caches and reuses the sampleBC DB used in the SEEK python tests.
      # The tests check is the DB files exist and if they don't it
      #   rebuilds them, which would then be cached for future runs.
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if environment.yml has not changed
        CACHE_NUMBER: 2
      with:
        path: ${{github.workspace}}/tests/test_outputs/sampleBC
        key:
          seek_cache-${{ runner.os }}-${{ env.CACHE_NUMBER }}-${{
            hashFiles('scripts/seek/seekCreateDB.py') }}-${{
            hashFiles('scripts/seek/seekUtils.py') }}

    - name: Test SEEK Tools
      # Execute python based tests
      working-directory: ${{github.workspace}}
      run: |
        python -m pytest -s -v tests/

    - name: Test SEEK Scripts
      # Execute python based tests
      working-directory: ${{github.workspace}}
      run: |
        # $CONDA/bin/activate base
        python -m pytest -s -v scripts/seek/tests/

