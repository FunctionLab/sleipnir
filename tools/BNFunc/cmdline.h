/* cmdline.h */

/* File autogenerated by gengetopt version 2.13.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "BNFunc"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  char * input_arg;	/* Ontology slim file.  */
  char * output_arg;	/* Answer file.  */
  char * negatives_arg;	/* Negative slim file.  */
  char * directory_arg;	/* Output directory (default='.').  */
  char * kegg_arg;	/* KEGG ontology.  */
  char * kegg_org_arg;	/* KEGG organism (default='SCE').  */
  char * go_onto_arg;	/* GO ontology.  */
  char * go_anno_arg;	/* GO annotations.  */
  char * go_name_arg;	/* GO namespace (default='bp').  */
  char * mips_onto_arg;	/* MIPS ontology.  */
  char * mips_anno_arg;	/* MIPS annotations.  */
  int random_arg;	/* Seed random generator (default='0').  */
  double test_arg;	/* Test fraction (default='0').  */
  int synonyms_flag;	/* Prefer synonym names (default=off).  */
  char * sql_arg;	/* Directory in which to place SQL tables.  */
  int verbosity_arg;	/* Message verbosity (default='5').  */
  char * config_arg;	/* Command line config file (default='BNFunc.ini').  */
  int dbids_flag;	/* Include GO database IDs (default=off).  */
  int allids_flag;	/* Output all available IDs (default=off).  */
  int nsets_flag;	/* Generate negative sets for input slim (default=off).  */
  double nsetlap_arg;	/* P-value of overlap for negative rejection (default='0.05').  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int output_given ;	/* Whether output was given.  */
  int negatives_given ;	/* Whether negatives was given.  */
  int directory_given ;	/* Whether directory was given.  */
  int kegg_given ;	/* Whether kegg was given.  */
  int kegg_org_given ;	/* Whether kegg_org was given.  */
  int go_onto_given ;	/* Whether go_onto was given.  */
  int go_anno_given ;	/* Whether go_anno was given.  */
  int go_name_given ;	/* Whether go_name was given.  */
  int mips_onto_given ;	/* Whether mips_onto was given.  */
  int mips_anno_given ;	/* Whether mips_anno was given.  */
  int random_given ;	/* Whether random was given.  */
  int test_given ;	/* Whether test was given.  */
  int synonyms_given ;	/* Whether synonyms was given.  */
  int sql_given ;	/* Whether sql was given.  */
  int verbosity_given ;	/* Whether verbosity was given.  */
  int config_given ;	/* Whether config was given.  */
  int dbids_given ;	/* Whether dbids was given.  */
  int allids_given ;	/* Whether allids was given.  */
  int nsets_given ;	/* Whether nsets was given.  */
  int nsetlap_given ;	/* Whether nsetlap was given.  */

} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_configfile (char * const filename, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);

extern char *go_name_values[] ;	/* Possible values for go_name.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
