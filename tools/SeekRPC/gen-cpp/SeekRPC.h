/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SeekRPC_H
#define SeekRPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "seek_rpc_types.h"

namespace SeekRPC {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SeekRPCIf {
 public:
  virtual ~SeekRPCIf() {}
  virtual void seekQuery(QueryResult& _return, const SeekQuery& query) = 0;
  virtual int64_t seekQueryAsync(const SeekQuery& query) = 0;
  virtual void getQueryResult(QueryResult& _return, const int64_t taskId, const bool block) = 0;
  virtual bool isQueryComplete(const int64_t taskId) = 0;
  virtual void getProgressMessage(std::string& _return, const int64_t taskId) = 0;
  virtual int32_t getRpcVersion() = 0;
  virtual int32_t ping() = 0;
  virtual int32_t pvalueGenes() = 0;
  virtual int32_t pvalueDatasets() = 0;
  virtual int32_t pclData() = 0;
};

class SeekRPCIfFactory {
 public:
  typedef SeekRPCIf Handler;

  virtual ~SeekRPCIfFactory() {}

  virtual SeekRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SeekRPCIf* /* handler */) = 0;
};

class SeekRPCIfSingletonFactory : virtual public SeekRPCIfFactory {
 public:
  SeekRPCIfSingletonFactory(const ::std::shared_ptr<SeekRPCIf>& iface) : iface_(iface) {}
  virtual ~SeekRPCIfSingletonFactory() {}

  virtual SeekRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SeekRPCIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SeekRPCIf> iface_;
};

class SeekRPCNull : virtual public SeekRPCIf {
 public:
  virtual ~SeekRPCNull() {}
  void seekQuery(QueryResult& /* _return */, const SeekQuery& /* query */) {
    return;
  }
  int64_t seekQueryAsync(const SeekQuery& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void getQueryResult(QueryResult& /* _return */, const int64_t /* taskId */, const bool /* block */) {
    return;
  }
  bool isQueryComplete(const int64_t /* taskId */) {
    bool _return = false;
    return _return;
  }
  void getProgressMessage(std::string& /* _return */, const int64_t /* taskId */) {
    return;
  }
  int32_t getRpcVersion() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pvalueGenes() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pvalueDatasets() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pclData() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SeekRPC_seekQuery_args__isset {
  _SeekRPC_seekQuery_args__isset() : query(false) {}
  bool query :1;
} _SeekRPC_seekQuery_args__isset;

class SeekRPC_seekQuery_args {
 public:

  SeekRPC_seekQuery_args(const SeekRPC_seekQuery_args&);
  SeekRPC_seekQuery_args& operator=(const SeekRPC_seekQuery_args&);
  SeekRPC_seekQuery_args() {
  }

  virtual ~SeekRPC_seekQuery_args() noexcept;
  SeekQuery query;

  _SeekRPC_seekQuery_args__isset __isset;

  void __set_query(const SeekQuery& val);

  bool operator == (const SeekRPC_seekQuery_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seekQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seekQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_seekQuery_pargs {
 public:


  virtual ~SeekRPC_seekQuery_pargs() noexcept;
  const SeekQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seekQuery_result__isset {
  _SeekRPC_seekQuery_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seekQuery_result__isset;

class SeekRPC_seekQuery_result {
 public:

  SeekRPC_seekQuery_result(const SeekRPC_seekQuery_result&);
  SeekRPC_seekQuery_result& operator=(const SeekRPC_seekQuery_result&);
  SeekRPC_seekQuery_result() {
  }

  virtual ~SeekRPC_seekQuery_result() noexcept;
  QueryResult success;

  _SeekRPC_seekQuery_result__isset __isset;

  void __set_success(const QueryResult& val);

  bool operator == (const SeekRPC_seekQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seekQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seekQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seekQuery_presult__isset {
  _SeekRPC_seekQuery_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seekQuery_presult__isset;

class SeekRPC_seekQuery_presult {
 public:


  virtual ~SeekRPC_seekQuery_presult() noexcept;
  QueryResult* success;

  _SeekRPC_seekQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_seekQueryAsync_args__isset {
  _SeekRPC_seekQueryAsync_args__isset() : query(false) {}
  bool query :1;
} _SeekRPC_seekQueryAsync_args__isset;

class SeekRPC_seekQueryAsync_args {
 public:

  SeekRPC_seekQueryAsync_args(const SeekRPC_seekQueryAsync_args&);
  SeekRPC_seekQueryAsync_args& operator=(const SeekRPC_seekQueryAsync_args&);
  SeekRPC_seekQueryAsync_args() {
  }

  virtual ~SeekRPC_seekQueryAsync_args() noexcept;
  SeekQuery query;

  _SeekRPC_seekQueryAsync_args__isset __isset;

  void __set_query(const SeekQuery& val);

  bool operator == (const SeekRPC_seekQueryAsync_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seekQueryAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seekQueryAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_seekQueryAsync_pargs {
 public:


  virtual ~SeekRPC_seekQueryAsync_pargs() noexcept;
  const SeekQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seekQueryAsync_result__isset {
  _SeekRPC_seekQueryAsync_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seekQueryAsync_result__isset;

class SeekRPC_seekQueryAsync_result {
 public:

  SeekRPC_seekQueryAsync_result(const SeekRPC_seekQueryAsync_result&);
  SeekRPC_seekQueryAsync_result& operator=(const SeekRPC_seekQueryAsync_result&);
  SeekRPC_seekQueryAsync_result() : success(0) {
  }

  virtual ~SeekRPC_seekQueryAsync_result() noexcept;
  int64_t success;

  _SeekRPC_seekQueryAsync_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SeekRPC_seekQueryAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seekQueryAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seekQueryAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seekQueryAsync_presult__isset {
  _SeekRPC_seekQueryAsync_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seekQueryAsync_presult__isset;

class SeekRPC_seekQueryAsync_presult {
 public:


  virtual ~SeekRPC_seekQueryAsync_presult() noexcept;
  int64_t* success;

  _SeekRPC_seekQueryAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_getQueryResult_args__isset {
  _SeekRPC_getQueryResult_args__isset() : taskId(false), block(true) {}
  bool taskId :1;
  bool block :1;
} _SeekRPC_getQueryResult_args__isset;

class SeekRPC_getQueryResult_args {
 public:

  SeekRPC_getQueryResult_args(const SeekRPC_getQueryResult_args&);
  SeekRPC_getQueryResult_args& operator=(const SeekRPC_getQueryResult_args&);
  SeekRPC_getQueryResult_args() : taskId(0), block(true) {
  }

  virtual ~SeekRPC_getQueryResult_args() noexcept;
  int64_t taskId;
  bool block;

  _SeekRPC_getQueryResult_args__isset __isset;

  void __set_taskId(const int64_t val);

  void __set_block(const bool val);

  bool operator == (const SeekRPC_getQueryResult_args & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_getQueryResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getQueryResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_getQueryResult_pargs {
 public:


  virtual ~SeekRPC_getQueryResult_pargs() noexcept;
  const int64_t* taskId;
  const bool* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getQueryResult_result__isset {
  _SeekRPC_getQueryResult_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getQueryResult_result__isset;

class SeekRPC_getQueryResult_result {
 public:

  SeekRPC_getQueryResult_result(const SeekRPC_getQueryResult_result&);
  SeekRPC_getQueryResult_result& operator=(const SeekRPC_getQueryResult_result&);
  SeekRPC_getQueryResult_result() {
  }

  virtual ~SeekRPC_getQueryResult_result() noexcept;
  QueryResult success;

  _SeekRPC_getQueryResult_result__isset __isset;

  void __set_success(const QueryResult& val);

  bool operator == (const SeekRPC_getQueryResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_getQueryResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getQueryResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getQueryResult_presult__isset {
  _SeekRPC_getQueryResult_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getQueryResult_presult__isset;

class SeekRPC_getQueryResult_presult {
 public:


  virtual ~SeekRPC_getQueryResult_presult() noexcept;
  QueryResult* success;

  _SeekRPC_getQueryResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_isQueryComplete_args__isset {
  _SeekRPC_isQueryComplete_args__isset() : taskId(false) {}
  bool taskId :1;
} _SeekRPC_isQueryComplete_args__isset;

class SeekRPC_isQueryComplete_args {
 public:

  SeekRPC_isQueryComplete_args(const SeekRPC_isQueryComplete_args&);
  SeekRPC_isQueryComplete_args& operator=(const SeekRPC_isQueryComplete_args&);
  SeekRPC_isQueryComplete_args() : taskId(0) {
  }

  virtual ~SeekRPC_isQueryComplete_args() noexcept;
  int64_t taskId;

  _SeekRPC_isQueryComplete_args__isset __isset;

  void __set_taskId(const int64_t val);

  bool operator == (const SeekRPC_isQueryComplete_args & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_isQueryComplete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_isQueryComplete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_isQueryComplete_pargs {
 public:


  virtual ~SeekRPC_isQueryComplete_pargs() noexcept;
  const int64_t* taskId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_isQueryComplete_result__isset {
  _SeekRPC_isQueryComplete_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_isQueryComplete_result__isset;

class SeekRPC_isQueryComplete_result {
 public:

  SeekRPC_isQueryComplete_result(const SeekRPC_isQueryComplete_result&);
  SeekRPC_isQueryComplete_result& operator=(const SeekRPC_isQueryComplete_result&);
  SeekRPC_isQueryComplete_result() : success(0) {
  }

  virtual ~SeekRPC_isQueryComplete_result() noexcept;
  bool success;

  _SeekRPC_isQueryComplete_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const SeekRPC_isQueryComplete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_isQueryComplete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_isQueryComplete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_isQueryComplete_presult__isset {
  _SeekRPC_isQueryComplete_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_isQueryComplete_presult__isset;

class SeekRPC_isQueryComplete_presult {
 public:


  virtual ~SeekRPC_isQueryComplete_presult() noexcept;
  bool* success;

  _SeekRPC_isQueryComplete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_getProgressMessage_args__isset {
  _SeekRPC_getProgressMessage_args__isset() : taskId(false) {}
  bool taskId :1;
} _SeekRPC_getProgressMessage_args__isset;

class SeekRPC_getProgressMessage_args {
 public:

  SeekRPC_getProgressMessage_args(const SeekRPC_getProgressMessage_args&);
  SeekRPC_getProgressMessage_args& operator=(const SeekRPC_getProgressMessage_args&);
  SeekRPC_getProgressMessage_args() : taskId(0) {
  }

  virtual ~SeekRPC_getProgressMessage_args() noexcept;
  int64_t taskId;

  _SeekRPC_getProgressMessage_args__isset __isset;

  void __set_taskId(const int64_t val);

  bool operator == (const SeekRPC_getProgressMessage_args & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_getProgressMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getProgressMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_getProgressMessage_pargs {
 public:


  virtual ~SeekRPC_getProgressMessage_pargs() noexcept;
  const int64_t* taskId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getProgressMessage_result__isset {
  _SeekRPC_getProgressMessage_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getProgressMessage_result__isset;

class SeekRPC_getProgressMessage_result {
 public:

  SeekRPC_getProgressMessage_result(const SeekRPC_getProgressMessage_result&);
  SeekRPC_getProgressMessage_result& operator=(const SeekRPC_getProgressMessage_result&);
  SeekRPC_getProgressMessage_result() : success() {
  }

  virtual ~SeekRPC_getProgressMessage_result() noexcept;
  std::string success;

  _SeekRPC_getProgressMessage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SeekRPC_getProgressMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_getProgressMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getProgressMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getProgressMessage_presult__isset {
  _SeekRPC_getProgressMessage_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getProgressMessage_presult__isset;

class SeekRPC_getProgressMessage_presult {
 public:


  virtual ~SeekRPC_getProgressMessage_presult() noexcept;
  std::string* success;

  _SeekRPC_getProgressMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_getRpcVersion_args {
 public:

  SeekRPC_getRpcVersion_args(const SeekRPC_getRpcVersion_args&);
  SeekRPC_getRpcVersion_args& operator=(const SeekRPC_getRpcVersion_args&);
  SeekRPC_getRpcVersion_args() {
  }

  virtual ~SeekRPC_getRpcVersion_args() noexcept;

  bool operator == (const SeekRPC_getRpcVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_getRpcVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getRpcVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_getRpcVersion_pargs {
 public:


  virtual ~SeekRPC_getRpcVersion_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getRpcVersion_result__isset {
  _SeekRPC_getRpcVersion_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getRpcVersion_result__isset;

class SeekRPC_getRpcVersion_result {
 public:

  SeekRPC_getRpcVersion_result(const SeekRPC_getRpcVersion_result&);
  SeekRPC_getRpcVersion_result& operator=(const SeekRPC_getRpcVersion_result&);
  SeekRPC_getRpcVersion_result() : success(0) {
  }

  virtual ~SeekRPC_getRpcVersion_result() noexcept;
  int32_t success;

  _SeekRPC_getRpcVersion_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_getRpcVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_getRpcVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_getRpcVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_getRpcVersion_presult__isset {
  _SeekRPC_getRpcVersion_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_getRpcVersion_presult__isset;

class SeekRPC_getRpcVersion_presult {
 public:


  virtual ~SeekRPC_getRpcVersion_presult() noexcept;
  int32_t* success;

  _SeekRPC_getRpcVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_ping_args {
 public:

  SeekRPC_ping_args(const SeekRPC_ping_args&);
  SeekRPC_ping_args& operator=(const SeekRPC_ping_args&);
  SeekRPC_ping_args() {
  }

  virtual ~SeekRPC_ping_args() noexcept;

  bool operator == (const SeekRPC_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_ping_pargs {
 public:


  virtual ~SeekRPC_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_ping_result__isset {
  _SeekRPC_ping_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_ping_result__isset;

class SeekRPC_ping_result {
 public:

  SeekRPC_ping_result(const SeekRPC_ping_result&);
  SeekRPC_ping_result& operator=(const SeekRPC_ping_result&);
  SeekRPC_ping_result() : success(0) {
  }

  virtual ~SeekRPC_ping_result() noexcept;
  int32_t success;

  _SeekRPC_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_ping_presult__isset {
  _SeekRPC_ping_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_ping_presult__isset;

class SeekRPC_ping_presult {
 public:


  virtual ~SeekRPC_ping_presult() noexcept;
  int32_t* success;

  _SeekRPC_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pvalueGenes_args {
 public:

  SeekRPC_pvalueGenes_args(const SeekRPC_pvalueGenes_args&);
  SeekRPC_pvalueGenes_args& operator=(const SeekRPC_pvalueGenes_args&);
  SeekRPC_pvalueGenes_args() {
  }

  virtual ~SeekRPC_pvalueGenes_args() noexcept;

  bool operator == (const SeekRPC_pvalueGenes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pvalueGenes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalueGenes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pvalueGenes_pargs {
 public:


  virtual ~SeekRPC_pvalueGenes_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalueGenes_result__isset {
  _SeekRPC_pvalueGenes_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalueGenes_result__isset;

class SeekRPC_pvalueGenes_result {
 public:

  SeekRPC_pvalueGenes_result(const SeekRPC_pvalueGenes_result&);
  SeekRPC_pvalueGenes_result& operator=(const SeekRPC_pvalueGenes_result&);
  SeekRPC_pvalueGenes_result() : success(0) {
  }

  virtual ~SeekRPC_pvalueGenes_result() noexcept;
  int32_t success;

  _SeekRPC_pvalueGenes_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pvalueGenes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pvalueGenes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalueGenes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalueGenes_presult__isset {
  _SeekRPC_pvalueGenes_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalueGenes_presult__isset;

class SeekRPC_pvalueGenes_presult {
 public:


  virtual ~SeekRPC_pvalueGenes_presult() noexcept;
  int32_t* success;

  _SeekRPC_pvalueGenes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pvalueDatasets_args {
 public:

  SeekRPC_pvalueDatasets_args(const SeekRPC_pvalueDatasets_args&);
  SeekRPC_pvalueDatasets_args& operator=(const SeekRPC_pvalueDatasets_args&);
  SeekRPC_pvalueDatasets_args() {
  }

  virtual ~SeekRPC_pvalueDatasets_args() noexcept;

  bool operator == (const SeekRPC_pvalueDatasets_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pvalueDatasets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalueDatasets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pvalueDatasets_pargs {
 public:


  virtual ~SeekRPC_pvalueDatasets_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalueDatasets_result__isset {
  _SeekRPC_pvalueDatasets_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalueDatasets_result__isset;

class SeekRPC_pvalueDatasets_result {
 public:

  SeekRPC_pvalueDatasets_result(const SeekRPC_pvalueDatasets_result&);
  SeekRPC_pvalueDatasets_result& operator=(const SeekRPC_pvalueDatasets_result&);
  SeekRPC_pvalueDatasets_result() : success(0) {
  }

  virtual ~SeekRPC_pvalueDatasets_result() noexcept;
  int32_t success;

  _SeekRPC_pvalueDatasets_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pvalueDatasets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pvalueDatasets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalueDatasets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalueDatasets_presult__isset {
  _SeekRPC_pvalueDatasets_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalueDatasets_presult__isset;

class SeekRPC_pvalueDatasets_presult {
 public:


  virtual ~SeekRPC_pvalueDatasets_presult() noexcept;
  int32_t* success;

  _SeekRPC_pvalueDatasets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pclData_args {
 public:

  SeekRPC_pclData_args(const SeekRPC_pclData_args&);
  SeekRPC_pclData_args& operator=(const SeekRPC_pclData_args&);
  SeekRPC_pclData_args() {
  }

  virtual ~SeekRPC_pclData_args() noexcept;

  bool operator == (const SeekRPC_pclData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pclData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pclData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pclData_pargs {
 public:


  virtual ~SeekRPC_pclData_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pclData_result__isset {
  _SeekRPC_pclData_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pclData_result__isset;

class SeekRPC_pclData_result {
 public:

  SeekRPC_pclData_result(const SeekRPC_pclData_result&);
  SeekRPC_pclData_result& operator=(const SeekRPC_pclData_result&);
  SeekRPC_pclData_result() : success(0) {
  }

  virtual ~SeekRPC_pclData_result() noexcept;
  int32_t success;

  _SeekRPC_pclData_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pclData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pclData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pclData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pclData_presult__isset {
  _SeekRPC_pclData_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pclData_presult__isset;

class SeekRPC_pclData_presult {
 public:


  virtual ~SeekRPC_pclData_presult() noexcept;
  int32_t* success;

  _SeekRPC_pclData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SeekRPCClient : virtual public SeekRPCIf {
 public:
  SeekRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SeekRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void seekQuery(QueryResult& _return, const SeekQuery& query);
  void send_seekQuery(const SeekQuery& query);
  void recv_seekQuery(QueryResult& _return);
  int64_t seekQueryAsync(const SeekQuery& query);
  void send_seekQueryAsync(const SeekQuery& query);
  int64_t recv_seekQueryAsync();
  void getQueryResult(QueryResult& _return, const int64_t taskId, const bool block);
  void send_getQueryResult(const int64_t taskId, const bool block);
  void recv_getQueryResult(QueryResult& _return);
  bool isQueryComplete(const int64_t taskId);
  void send_isQueryComplete(const int64_t taskId);
  bool recv_isQueryComplete();
  void getProgressMessage(std::string& _return, const int64_t taskId);
  void send_getProgressMessage(const int64_t taskId);
  void recv_getProgressMessage(std::string& _return);
  int32_t getRpcVersion();
  void send_getRpcVersion();
  int32_t recv_getRpcVersion();
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  int32_t pvalueGenes();
  void send_pvalueGenes();
  int32_t recv_pvalueGenes();
  int32_t pvalueDatasets();
  void send_pvalueDatasets();
  int32_t recv_pvalueDatasets();
  int32_t pclData();
  void send_pclData();
  int32_t recv_pclData();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SeekRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SeekRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SeekRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_seekQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_seekQueryAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueryResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isQueryComplete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProgressMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRpcVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pvalueGenes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pvalueDatasets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pclData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SeekRPCProcessor(::std::shared_ptr<SeekRPCIf> iface) :
    iface_(iface) {
    processMap_["seekQuery"] = &SeekRPCProcessor::process_seekQuery;
    processMap_["seekQueryAsync"] = &SeekRPCProcessor::process_seekQueryAsync;
    processMap_["getQueryResult"] = &SeekRPCProcessor::process_getQueryResult;
    processMap_["isQueryComplete"] = &SeekRPCProcessor::process_isQueryComplete;
    processMap_["getProgressMessage"] = &SeekRPCProcessor::process_getProgressMessage;
    processMap_["getRpcVersion"] = &SeekRPCProcessor::process_getRpcVersion;
    processMap_["ping"] = &SeekRPCProcessor::process_ping;
    processMap_["pvalueGenes"] = &SeekRPCProcessor::process_pvalueGenes;
    processMap_["pvalueDatasets"] = &SeekRPCProcessor::process_pvalueDatasets;
    processMap_["pclData"] = &SeekRPCProcessor::process_pclData;
  }

  virtual ~SeekRPCProcessor() {}
};

class SeekRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SeekRPCProcessorFactory(const ::std::shared_ptr< SeekRPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SeekRPCIfFactory > handlerFactory_;
};

class SeekRPCMultiface : virtual public SeekRPCIf {
 public:
  SeekRPCMultiface(std::vector<std::shared_ptr<SeekRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SeekRPCMultiface() {}
 protected:
  std::vector<std::shared_ptr<SeekRPCIf> > ifaces_;
  SeekRPCMultiface() {}
  void add(::std::shared_ptr<SeekRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void seekQuery(QueryResult& _return, const SeekQuery& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seekQuery(_return, query);
    }
    ifaces_[i]->seekQuery(_return, query);
    return;
  }

  int64_t seekQueryAsync(const SeekQuery& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seekQueryAsync(query);
    }
    return ifaces_[i]->seekQueryAsync(query);
  }

  void getQueryResult(QueryResult& _return, const int64_t taskId, const bool block) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueryResult(_return, taskId, block);
    }
    ifaces_[i]->getQueryResult(_return, taskId, block);
    return;
  }

  bool isQueryComplete(const int64_t taskId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isQueryComplete(taskId);
    }
    return ifaces_[i]->isQueryComplete(taskId);
  }

  void getProgressMessage(std::string& _return, const int64_t taskId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProgressMessage(_return, taskId);
    }
    ifaces_[i]->getProgressMessage(_return, taskId);
    return;
  }

  int32_t getRpcVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRpcVersion();
    }
    return ifaces_[i]->getRpcVersion();
  }

  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  int32_t pvalueGenes() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pvalueGenes();
    }
    return ifaces_[i]->pvalueGenes();
  }

  int32_t pvalueDatasets() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pvalueDatasets();
    }
    return ifaces_[i]->pvalueDatasets();
  }

  int32_t pclData() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pclData();
    }
    return ifaces_[i]->pclData();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SeekRPCConcurrentClient : virtual public SeekRPCIf {
 public:
  SeekRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SeekRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void seekQuery(QueryResult& _return, const SeekQuery& query);
  int32_t send_seekQuery(const SeekQuery& query);
  void recv_seekQuery(QueryResult& _return, const int32_t seqid);
  int64_t seekQueryAsync(const SeekQuery& query);
  int32_t send_seekQueryAsync(const SeekQuery& query);
  int64_t recv_seekQueryAsync(const int32_t seqid);
  void getQueryResult(QueryResult& _return, const int64_t taskId, const bool block);
  int32_t send_getQueryResult(const int64_t taskId, const bool block);
  void recv_getQueryResult(QueryResult& _return, const int32_t seqid);
  bool isQueryComplete(const int64_t taskId);
  int32_t send_isQueryComplete(const int64_t taskId);
  bool recv_isQueryComplete(const int32_t seqid);
  void getProgressMessage(std::string& _return, const int64_t taskId);
  int32_t send_getProgressMessage(const int64_t taskId);
  void recv_getProgressMessage(std::string& _return, const int32_t seqid);
  int32_t getRpcVersion();
  int32_t send_getRpcVersion();
  int32_t recv_getRpcVersion(const int32_t seqid);
  int32_t ping();
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
  int32_t pvalueGenes();
  int32_t send_pvalueGenes();
  int32_t recv_pvalueGenes(const int32_t seqid);
  int32_t pvalueDatasets();
  int32_t send_pvalueDatasets();
  int32_t recv_pvalueDatasets(const int32_t seqid);
  int32_t pclData();
  int32_t send_pclData();
  int32_t recv_pclData(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
