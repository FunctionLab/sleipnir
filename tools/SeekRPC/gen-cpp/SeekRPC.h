/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef SeekRPC_H
#define SeekRPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "seek_rpc_types.h"

namespace SeekRPC {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class SeekRPCIf {
 public:
  virtual ~SeekRPCIf() {}
  virtual void seek_query(QueryResult& _return, const SeekQuery& query) = 0;
  virtual int64_t seek_query_async(const SeekQuery& query) = 0;
  virtual void seek_get_result(QueryResult& _return, const int64_t task_id) = 0;
  virtual void get_progress_message(std::string& _return, const int64_t task_id) = 0;
  virtual int32_t ping() = 0;
  virtual int32_t pvalue_genes() = 0;
  virtual int32_t pvalue_datasets() = 0;
  virtual int32_t pcl_data() = 0;
};

class SeekRPCIfFactory {
 public:
  typedef SeekRPCIf Handler;

  virtual ~SeekRPCIfFactory() {}

  virtual SeekRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(SeekRPCIf* /* handler */) = 0;
};

class SeekRPCIfSingletonFactory : virtual public SeekRPCIfFactory {
 public:
  SeekRPCIfSingletonFactory(const ::std::shared_ptr<SeekRPCIf>& iface) : iface_(iface) {}
  virtual ~SeekRPCIfSingletonFactory() {}

  virtual SeekRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(SeekRPCIf* /* handler */) {}

 protected:
  ::std::shared_ptr<SeekRPCIf> iface_;
};

class SeekRPCNull : virtual public SeekRPCIf {
 public:
  virtual ~SeekRPCNull() {}
  void seek_query(QueryResult& /* _return */, const SeekQuery& /* query */) {
    return;
  }
  int64_t seek_query_async(const SeekQuery& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void seek_get_result(QueryResult& /* _return */, const int64_t /* task_id */) {
    return;
  }
  void get_progress_message(std::string& /* _return */, const int64_t /* task_id */) {
    return;
  }
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pvalue_genes() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pvalue_datasets() {
    int32_t _return = 0;
    return _return;
  }
  int32_t pcl_data() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _SeekRPC_seek_query_args__isset {
  _SeekRPC_seek_query_args__isset() : query(false) {}
  bool query :1;
} _SeekRPC_seek_query_args__isset;

class SeekRPC_seek_query_args {
 public:

  SeekRPC_seek_query_args(const SeekRPC_seek_query_args&);
  SeekRPC_seek_query_args& operator=(const SeekRPC_seek_query_args&);
  SeekRPC_seek_query_args() {
  }

  virtual ~SeekRPC_seek_query_args() noexcept;
  SeekQuery query;

  _SeekRPC_seek_query_args__isset __isset;

  void __set_query(const SeekQuery& val);

  bool operator == (const SeekRPC_seek_query_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_query_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_query_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_seek_query_pargs {
 public:


  virtual ~SeekRPC_seek_query_pargs() noexcept;
  const SeekQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_query_result__isset {
  _SeekRPC_seek_query_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_query_result__isset;

class SeekRPC_seek_query_result {
 public:

  SeekRPC_seek_query_result(const SeekRPC_seek_query_result&);
  SeekRPC_seek_query_result& operator=(const SeekRPC_seek_query_result&);
  SeekRPC_seek_query_result() {
  }

  virtual ~SeekRPC_seek_query_result() noexcept;
  QueryResult success;

  _SeekRPC_seek_query_result__isset __isset;

  void __set_success(const QueryResult& val);

  bool operator == (const SeekRPC_seek_query_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_query_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_query_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_query_presult__isset {
  _SeekRPC_seek_query_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_query_presult__isset;

class SeekRPC_seek_query_presult {
 public:


  virtual ~SeekRPC_seek_query_presult() noexcept;
  QueryResult* success;

  _SeekRPC_seek_query_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_seek_query_async_args__isset {
  _SeekRPC_seek_query_async_args__isset() : query(false) {}
  bool query :1;
} _SeekRPC_seek_query_async_args__isset;

class SeekRPC_seek_query_async_args {
 public:

  SeekRPC_seek_query_async_args(const SeekRPC_seek_query_async_args&);
  SeekRPC_seek_query_async_args& operator=(const SeekRPC_seek_query_async_args&);
  SeekRPC_seek_query_async_args() {
  }

  virtual ~SeekRPC_seek_query_async_args() noexcept;
  SeekQuery query;

  _SeekRPC_seek_query_async_args__isset __isset;

  void __set_query(const SeekQuery& val);

  bool operator == (const SeekRPC_seek_query_async_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_query_async_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_query_async_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_seek_query_async_pargs {
 public:


  virtual ~SeekRPC_seek_query_async_pargs() noexcept;
  const SeekQuery* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_query_async_result__isset {
  _SeekRPC_seek_query_async_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_query_async_result__isset;

class SeekRPC_seek_query_async_result {
 public:

  SeekRPC_seek_query_async_result(const SeekRPC_seek_query_async_result&);
  SeekRPC_seek_query_async_result& operator=(const SeekRPC_seek_query_async_result&);
  SeekRPC_seek_query_async_result() : success(0) {
  }

  virtual ~SeekRPC_seek_query_async_result() noexcept;
  int64_t success;

  _SeekRPC_seek_query_async_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const SeekRPC_seek_query_async_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_query_async_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_query_async_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_query_async_presult__isset {
  _SeekRPC_seek_query_async_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_query_async_presult__isset;

class SeekRPC_seek_query_async_presult {
 public:


  virtual ~SeekRPC_seek_query_async_presult() noexcept;
  int64_t* success;

  _SeekRPC_seek_query_async_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_seek_get_result_args__isset {
  _SeekRPC_seek_get_result_args__isset() : task_id(false) {}
  bool task_id :1;
} _SeekRPC_seek_get_result_args__isset;

class SeekRPC_seek_get_result_args {
 public:

  SeekRPC_seek_get_result_args(const SeekRPC_seek_get_result_args&);
  SeekRPC_seek_get_result_args& operator=(const SeekRPC_seek_get_result_args&);
  SeekRPC_seek_get_result_args() : task_id(0) {
  }

  virtual ~SeekRPC_seek_get_result_args() noexcept;
  int64_t task_id;

  _SeekRPC_seek_get_result_args__isset __isset;

  void __set_task_id(const int64_t val);

  bool operator == (const SeekRPC_seek_get_result_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_get_result_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_get_result_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_seek_get_result_pargs {
 public:


  virtual ~SeekRPC_seek_get_result_pargs() noexcept;
  const int64_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_get_result_result__isset {
  _SeekRPC_seek_get_result_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_get_result_result__isset;

class SeekRPC_seek_get_result_result {
 public:

  SeekRPC_seek_get_result_result(const SeekRPC_seek_get_result_result&);
  SeekRPC_seek_get_result_result& operator=(const SeekRPC_seek_get_result_result&);
  SeekRPC_seek_get_result_result() {
  }

  virtual ~SeekRPC_seek_get_result_result() noexcept;
  QueryResult success;

  _SeekRPC_seek_get_result_result__isset __isset;

  void __set_success(const QueryResult& val);

  bool operator == (const SeekRPC_seek_get_result_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_seek_get_result_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_seek_get_result_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_seek_get_result_presult__isset {
  _SeekRPC_seek_get_result_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_seek_get_result_presult__isset;

class SeekRPC_seek_get_result_presult {
 public:


  virtual ~SeekRPC_seek_get_result_presult() noexcept;
  QueryResult* success;

  _SeekRPC_seek_get_result_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _SeekRPC_get_progress_message_args__isset {
  _SeekRPC_get_progress_message_args__isset() : task_id(false) {}
  bool task_id :1;
} _SeekRPC_get_progress_message_args__isset;

class SeekRPC_get_progress_message_args {
 public:

  SeekRPC_get_progress_message_args(const SeekRPC_get_progress_message_args&);
  SeekRPC_get_progress_message_args& operator=(const SeekRPC_get_progress_message_args&);
  SeekRPC_get_progress_message_args() : task_id(0) {
  }

  virtual ~SeekRPC_get_progress_message_args() noexcept;
  int64_t task_id;

  _SeekRPC_get_progress_message_args__isset __isset;

  void __set_task_id(const int64_t val);

  bool operator == (const SeekRPC_get_progress_message_args & rhs) const
  {
    if (!(task_id == rhs.task_id))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_get_progress_message_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_get_progress_message_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_get_progress_message_pargs {
 public:


  virtual ~SeekRPC_get_progress_message_pargs() noexcept;
  const int64_t* task_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_get_progress_message_result__isset {
  _SeekRPC_get_progress_message_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_get_progress_message_result__isset;

class SeekRPC_get_progress_message_result {
 public:

  SeekRPC_get_progress_message_result(const SeekRPC_get_progress_message_result&);
  SeekRPC_get_progress_message_result& operator=(const SeekRPC_get_progress_message_result&);
  SeekRPC_get_progress_message_result() : success() {
  }

  virtual ~SeekRPC_get_progress_message_result() noexcept;
  std::string success;

  _SeekRPC_get_progress_message_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const SeekRPC_get_progress_message_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_get_progress_message_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_get_progress_message_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_get_progress_message_presult__isset {
  _SeekRPC_get_progress_message_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_get_progress_message_presult__isset;

class SeekRPC_get_progress_message_presult {
 public:


  virtual ~SeekRPC_get_progress_message_presult() noexcept;
  std::string* success;

  _SeekRPC_get_progress_message_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_ping_args {
 public:

  SeekRPC_ping_args(const SeekRPC_ping_args&);
  SeekRPC_ping_args& operator=(const SeekRPC_ping_args&);
  SeekRPC_ping_args() {
  }

  virtual ~SeekRPC_ping_args() noexcept;

  bool operator == (const SeekRPC_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_ping_pargs {
 public:


  virtual ~SeekRPC_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_ping_result__isset {
  _SeekRPC_ping_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_ping_result__isset;

class SeekRPC_ping_result {
 public:

  SeekRPC_ping_result(const SeekRPC_ping_result&);
  SeekRPC_ping_result& operator=(const SeekRPC_ping_result&);
  SeekRPC_ping_result() : success(0) {
  }

  virtual ~SeekRPC_ping_result() noexcept;
  int32_t success;

  _SeekRPC_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_ping_presult__isset {
  _SeekRPC_ping_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_ping_presult__isset;

class SeekRPC_ping_presult {
 public:


  virtual ~SeekRPC_ping_presult() noexcept;
  int32_t* success;

  _SeekRPC_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pvalue_genes_args {
 public:

  SeekRPC_pvalue_genes_args(const SeekRPC_pvalue_genes_args&);
  SeekRPC_pvalue_genes_args& operator=(const SeekRPC_pvalue_genes_args&);
  SeekRPC_pvalue_genes_args() {
  }

  virtual ~SeekRPC_pvalue_genes_args() noexcept;

  bool operator == (const SeekRPC_pvalue_genes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pvalue_genes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalue_genes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pvalue_genes_pargs {
 public:


  virtual ~SeekRPC_pvalue_genes_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalue_genes_result__isset {
  _SeekRPC_pvalue_genes_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalue_genes_result__isset;

class SeekRPC_pvalue_genes_result {
 public:

  SeekRPC_pvalue_genes_result(const SeekRPC_pvalue_genes_result&);
  SeekRPC_pvalue_genes_result& operator=(const SeekRPC_pvalue_genes_result&);
  SeekRPC_pvalue_genes_result() : success(0) {
  }

  virtual ~SeekRPC_pvalue_genes_result() noexcept;
  int32_t success;

  _SeekRPC_pvalue_genes_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pvalue_genes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pvalue_genes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalue_genes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalue_genes_presult__isset {
  _SeekRPC_pvalue_genes_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalue_genes_presult__isset;

class SeekRPC_pvalue_genes_presult {
 public:


  virtual ~SeekRPC_pvalue_genes_presult() noexcept;
  int32_t* success;

  _SeekRPC_pvalue_genes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pvalue_datasets_args {
 public:

  SeekRPC_pvalue_datasets_args(const SeekRPC_pvalue_datasets_args&);
  SeekRPC_pvalue_datasets_args& operator=(const SeekRPC_pvalue_datasets_args&);
  SeekRPC_pvalue_datasets_args() {
  }

  virtual ~SeekRPC_pvalue_datasets_args() noexcept;

  bool operator == (const SeekRPC_pvalue_datasets_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pvalue_datasets_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalue_datasets_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pvalue_datasets_pargs {
 public:


  virtual ~SeekRPC_pvalue_datasets_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalue_datasets_result__isset {
  _SeekRPC_pvalue_datasets_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalue_datasets_result__isset;

class SeekRPC_pvalue_datasets_result {
 public:

  SeekRPC_pvalue_datasets_result(const SeekRPC_pvalue_datasets_result&);
  SeekRPC_pvalue_datasets_result& operator=(const SeekRPC_pvalue_datasets_result&);
  SeekRPC_pvalue_datasets_result() : success(0) {
  }

  virtual ~SeekRPC_pvalue_datasets_result() noexcept;
  int32_t success;

  _SeekRPC_pvalue_datasets_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pvalue_datasets_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pvalue_datasets_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pvalue_datasets_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pvalue_datasets_presult__isset {
  _SeekRPC_pvalue_datasets_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pvalue_datasets_presult__isset;

class SeekRPC_pvalue_datasets_presult {
 public:


  virtual ~SeekRPC_pvalue_datasets_presult() noexcept;
  int32_t* success;

  _SeekRPC_pvalue_datasets_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class SeekRPC_pcl_data_args {
 public:

  SeekRPC_pcl_data_args(const SeekRPC_pcl_data_args&);
  SeekRPC_pcl_data_args& operator=(const SeekRPC_pcl_data_args&);
  SeekRPC_pcl_data_args() {
  }

  virtual ~SeekRPC_pcl_data_args() noexcept;

  bool operator == (const SeekRPC_pcl_data_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const SeekRPC_pcl_data_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pcl_data_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class SeekRPC_pcl_data_pargs {
 public:


  virtual ~SeekRPC_pcl_data_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pcl_data_result__isset {
  _SeekRPC_pcl_data_result__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pcl_data_result__isset;

class SeekRPC_pcl_data_result {
 public:

  SeekRPC_pcl_data_result(const SeekRPC_pcl_data_result&);
  SeekRPC_pcl_data_result& operator=(const SeekRPC_pcl_data_result&);
  SeekRPC_pcl_data_result() : success(0) {
  }

  virtual ~SeekRPC_pcl_data_result() noexcept;
  int32_t success;

  _SeekRPC_pcl_data_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const SeekRPC_pcl_data_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const SeekRPC_pcl_data_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekRPC_pcl_data_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _SeekRPC_pcl_data_presult__isset {
  _SeekRPC_pcl_data_presult__isset() : success(false) {}
  bool success :1;
} _SeekRPC_pcl_data_presult__isset;

class SeekRPC_pcl_data_presult {
 public:


  virtual ~SeekRPC_pcl_data_presult() noexcept;
  int32_t* success;

  _SeekRPC_pcl_data_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class SeekRPCClient : virtual public SeekRPCIf {
 public:
  SeekRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  SeekRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void seek_query(QueryResult& _return, const SeekQuery& query);
  void send_seek_query(const SeekQuery& query);
  void recv_seek_query(QueryResult& _return);
  int64_t seek_query_async(const SeekQuery& query);
  void send_seek_query_async(const SeekQuery& query);
  int64_t recv_seek_query_async();
  void seek_get_result(QueryResult& _return, const int64_t task_id);
  void send_seek_get_result(const int64_t task_id);
  void recv_seek_get_result(QueryResult& _return);
  void get_progress_message(std::string& _return, const int64_t task_id);
  void send_get_progress_message(const int64_t task_id);
  void recv_get_progress_message(std::string& _return);
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  int32_t pvalue_genes();
  void send_pvalue_genes();
  int32_t recv_pvalue_genes();
  int32_t pvalue_datasets();
  void send_pvalue_datasets();
  int32_t recv_pvalue_datasets();
  int32_t pcl_data();
  void send_pcl_data();
  int32_t recv_pcl_data();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class SeekRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<SeekRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (SeekRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_seek_query(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_seek_query_async(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_seek_get_result(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_progress_message(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pvalue_genes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pvalue_datasets(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pcl_data(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  SeekRPCProcessor(::std::shared_ptr<SeekRPCIf> iface) :
    iface_(iface) {
    processMap_["seek_query"] = &SeekRPCProcessor::process_seek_query;
    processMap_["seek_query_async"] = &SeekRPCProcessor::process_seek_query_async;
    processMap_["seek_get_result"] = &SeekRPCProcessor::process_seek_get_result;
    processMap_["get_progress_message"] = &SeekRPCProcessor::process_get_progress_message;
    processMap_["ping"] = &SeekRPCProcessor::process_ping;
    processMap_["pvalue_genes"] = &SeekRPCProcessor::process_pvalue_genes;
    processMap_["pvalue_datasets"] = &SeekRPCProcessor::process_pvalue_datasets;
    processMap_["pcl_data"] = &SeekRPCProcessor::process_pcl_data;
  }

  virtual ~SeekRPCProcessor() {}
};

class SeekRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  SeekRPCProcessorFactory(const ::std::shared_ptr< SeekRPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< SeekRPCIfFactory > handlerFactory_;
};

class SeekRPCMultiface : virtual public SeekRPCIf {
 public:
  SeekRPCMultiface(std::vector<std::shared_ptr<SeekRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~SeekRPCMultiface() {}
 protected:
  std::vector<std::shared_ptr<SeekRPCIf> > ifaces_;
  SeekRPCMultiface() {}
  void add(::std::shared_ptr<SeekRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void seek_query(QueryResult& _return, const SeekQuery& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seek_query(_return, query);
    }
    ifaces_[i]->seek_query(_return, query);
    return;
  }

  int64_t seek_query_async(const SeekQuery& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seek_query_async(query);
    }
    return ifaces_[i]->seek_query_async(query);
  }

  void seek_get_result(QueryResult& _return, const int64_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->seek_get_result(_return, task_id);
    }
    ifaces_[i]->seek_get_result(_return, task_id);
    return;
  }

  void get_progress_message(std::string& _return, const int64_t task_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_progress_message(_return, task_id);
    }
    ifaces_[i]->get_progress_message(_return, task_id);
    return;
  }

  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  int32_t pvalue_genes() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pvalue_genes();
    }
    return ifaces_[i]->pvalue_genes();
  }

  int32_t pvalue_datasets() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pvalue_datasets();
    }
    return ifaces_[i]->pvalue_datasets();
  }

  int32_t pcl_data() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pcl_data();
    }
    return ifaces_[i]->pcl_data();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class SeekRPCConcurrentClient : virtual public SeekRPCIf {
 public:
  SeekRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  SeekRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void seek_query(QueryResult& _return, const SeekQuery& query);
  int32_t send_seek_query(const SeekQuery& query);
  void recv_seek_query(QueryResult& _return, const int32_t seqid);
  int64_t seek_query_async(const SeekQuery& query);
  int32_t send_seek_query_async(const SeekQuery& query);
  int64_t recv_seek_query_async(const int32_t seqid);
  void seek_get_result(QueryResult& _return, const int64_t task_id);
  int32_t send_seek_get_result(const int64_t task_id);
  void recv_seek_get_result(QueryResult& _return, const int32_t seqid);
  void get_progress_message(std::string& _return, const int64_t task_id);
  int32_t send_get_progress_message(const int64_t task_id);
  void recv_get_progress_message(std::string& _return, const int32_t seqid);
  int32_t ping();
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
  int32_t pvalue_genes();
  int32_t send_pvalue_genes();
  int32_t recv_pvalue_genes(const int32_t seqid);
  int32_t pvalue_datasets();
  int32_t send_pvalue_datasets();
  int32_t recv_pvalue_datasets(const int32_t seqid);
  int32_t pcl_data();
  int32_t send_pcl_data();
  int32_t recv_pcl_data(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
