/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "seek_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace SeekRPC {


QueryParams::~QueryParams() noexcept {
}


void QueryParams::__set_search_method(const std::string& val) {
  this->search_method = val;
}

void QueryParams::__set_distance_measure(const std::string& val) {
  this->distance_measure = val;
__isset.distance_measure = true;
}

void QueryParams::__set_min_query_genes_fraction(const double val) {
  this->min_query_genes_fraction = val;
__isset.min_query_genes_fraction = true;
}

void QueryParams::__set_min_genome_fraction(const double val) {
  this->min_genome_fraction = val;
__isset.min_genome_fraction = true;
}

void QueryParams::__set_correlation_sign(const std::string& val) {
  this->correlation_sign = val;
__isset.correlation_sign = true;
}

void QueryParams::__set_rpb_param(const double val) {
  this->rpb_param = val;
__isset.rpb_param = true;
}
std::ostream& operator<<(std::ostream& out, const QueryParams& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_search_method = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->search_method);
          isset_search_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->distance_measure);
          this->__isset.distance_measure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_query_genes_fraction);
          this->__isset.min_query_genes_fraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_genome_fraction);
          this->__isset.min_genome_fraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->correlation_sign);
          this->__isset.correlation_sign = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rpb_param);
          this->__isset.rpb_param = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_search_method)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryParams");

  xfer += oprot->writeFieldBegin("search_method", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->search_method);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.distance_measure) {
    xfer += oprot->writeFieldBegin("distance_measure", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->distance_measure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.min_query_genes_fraction) {
    xfer += oprot->writeFieldBegin("min_query_genes_fraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->min_query_genes_fraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.min_genome_fraction) {
    xfer += oprot->writeFieldBegin("min_genome_fraction", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->min_genome_fraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.correlation_sign) {
    xfer += oprot->writeFieldBegin("correlation_sign", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->correlation_sign);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rpb_param) {
    xfer += oprot->writeFieldBegin("rpb_param", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->rpb_param);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryParams &a, QueryParams &b) {
  using ::std::swap;
  swap(a.search_method, b.search_method);
  swap(a.distance_measure, b.distance_measure);
  swap(a.min_query_genes_fraction, b.min_query_genes_fraction);
  swap(a.min_genome_fraction, b.min_genome_fraction);
  swap(a.correlation_sign, b.correlation_sign);
  swap(a.rpb_param, b.rpb_param);
  swap(a.__isset, b.__isset);
}

QueryParams::QueryParams(const QueryParams& other0) {
  search_method = other0.search_method;
  distance_measure = other0.distance_measure;
  min_query_genes_fraction = other0.min_query_genes_fraction;
  min_genome_fraction = other0.min_genome_fraction;
  correlation_sign = other0.correlation_sign;
  rpb_param = other0.rpb_param;
  __isset = other0.__isset;
}
QueryParams& QueryParams::operator=(const QueryParams& other1) {
  search_method = other1.search_method;
  distance_measure = other1.distance_measure;
  min_query_genes_fraction = other1.min_query_genes_fraction;
  min_genome_fraction = other1.min_genome_fraction;
  correlation_sign = other1.correlation_sign;
  rpb_param = other1.rpb_param;
  __isset = other1.__isset;
  return *this;
}
void QueryParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryParams(";
  out << "search_method=" << to_string(search_method);
  out << ", " << "distance_measure="; (__isset.distance_measure ? (out << to_string(distance_measure)) : (out << "<null>"));
  out << ", " << "min_query_genes_fraction="; (__isset.min_query_genes_fraction ? (out << to_string(min_query_genes_fraction)) : (out << "<null>"));
  out << ", " << "min_genome_fraction="; (__isset.min_genome_fraction ? (out << to_string(min_genome_fraction)) : (out << "<null>"));
  out << ", " << "correlation_sign="; (__isset.correlation_sign ? (out << to_string(correlation_sign)) : (out << "<null>"));
  out << ", " << "rpb_param="; (__isset.rpb_param ? (out << to_string(rpb_param)) : (out << "<null>"));
  out << ")";
}


SeekQuery::~SeekQuery() noexcept {
}


void SeekQuery::__set_species(const std::string& val) {
  this->species = val;
}

void SeekQuery::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
}

void SeekQuery::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
}

void SeekQuery::__set_outputDir(const std::string& val) {
  this->outputDir = val;
}

void SeekQuery::__set_parameters(const QueryParams& val) {
  this->parameters = val;
__isset.parameters = true;
}

void SeekQuery::__set_guideGenes(const std::vector<std::string> & val) {
  this->guideGenes = val;
__isset.guideGenes = true;
}
std::ostream& operator<<(std::ostream& out, const SeekQuery& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SeekQuery::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_species = false;
  bool isset_genes = false;
  bool isset_datasets = false;
  bool isset_outputDir = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->genes.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->genes[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->datasets.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->datasets[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputDir);
          isset_outputDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameters.read(iprot);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guideGenes.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->guideGenes.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->guideGenes[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guideGenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_genes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_outputDir)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SeekQuery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SeekQuery");

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
    std::vector<std::string> ::const_iterator _iter17;
    for (_iter17 = this->genes.begin(); _iter17 != this->genes.end(); ++_iter17)
    {
      xfer += oprot->writeString((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
    std::vector<std::string> ::const_iterator _iter18;
    for (_iter18 = this->datasets.begin(); _iter18 != this->datasets.end(); ++_iter18)
    {
      xfer += oprot->writeString((*_iter18));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("outputDir", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->outputDir);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->parameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guideGenes) {
    xfer += oprot->writeFieldBegin("guideGenes", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->guideGenes.size()));
      std::vector<std::string> ::const_iterator _iter19;
      for (_iter19 = this->guideGenes.begin(); _iter19 != this->guideGenes.end(); ++_iter19)
      {
        xfer += oprot->writeString((*_iter19));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SeekQuery &a, SeekQuery &b) {
  using ::std::swap;
  swap(a.species, b.species);
  swap(a.genes, b.genes);
  swap(a.datasets, b.datasets);
  swap(a.outputDir, b.outputDir);
  swap(a.parameters, b.parameters);
  swap(a.guideGenes, b.guideGenes);
  swap(a.__isset, b.__isset);
}

SeekQuery::SeekQuery(const SeekQuery& other20) {
  species = other20.species;
  genes = other20.genes;
  datasets = other20.datasets;
  outputDir = other20.outputDir;
  parameters = other20.parameters;
  guideGenes = other20.guideGenes;
  __isset = other20.__isset;
}
SeekQuery& SeekQuery::operator=(const SeekQuery& other21) {
  species = other21.species;
  genes = other21.genes;
  datasets = other21.datasets;
  outputDir = other21.outputDir;
  parameters = other21.parameters;
  guideGenes = other21.guideGenes;
  __isset = other21.__isset;
  return *this;
}
void SeekQuery::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeekQuery(";
  out << "species=" << to_string(species);
  out << ", " << "genes=" << to_string(genes);
  out << ", " << "datasets=" << to_string(datasets);
  out << ", " << "outputDir=" << to_string(outputDir);
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ", " << "guideGenes="; (__isset.guideGenes ? (out << to_string(guideGenes)) : (out << "<null>"));
  out << ")";
}


QueryResult::~QueryResult() noexcept {
}


void QueryResult::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
}

void QueryResult::__set_gene_scores(const std::vector<double> & val) {
  this->gene_scores = val;
}

void QueryResult::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
}

void QueryResult::__set_dataset_weights(const std::vector<double> & val) {
  this->dataset_weights = val;
}
std::ostream& operator<<(std::ostream& out, const QueryResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_genes = false;
  bool isset_gene_scores = false;
  bool isset_datasets = false;
  bool isset_dataset_weights = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->genes.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readString(this->genes[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          isset_genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->gene_scores.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->gene_scores.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readDouble(this->gene_scores[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          isset_gene_scores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->datasets.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += iprot->readString(this->datasets[_i36]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->dataset_weights.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->dataset_weights.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readDouble(this->dataset_weights[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          isset_dataset_weights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_genes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_gene_scores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_dataset_weights)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryResult");

  xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
    std::vector<std::string> ::const_iterator _iter42;
    for (_iter42 = this->genes.begin(); _iter42 != this->genes.end(); ++_iter42)
    {
      xfer += oprot->writeString((*_iter42));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gene_scores", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->gene_scores.size()));
    std::vector<double> ::const_iterator _iter43;
    for (_iter43 = this->gene_scores.begin(); _iter43 != this->gene_scores.end(); ++_iter43)
    {
      xfer += oprot->writeDouble((*_iter43));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
    std::vector<std::string> ::const_iterator _iter44;
    for (_iter44 = this->datasets.begin(); _iter44 != this->datasets.end(); ++_iter44)
    {
      xfer += oprot->writeString((*_iter44));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataset_weights", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->dataset_weights.size()));
    std::vector<double> ::const_iterator _iter45;
    for (_iter45 = this->dataset_weights.begin(); _iter45 != this->dataset_weights.end(); ++_iter45)
    {
      xfer += oprot->writeDouble((*_iter45));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryResult &a, QueryResult &b) {
  using ::std::swap;
  swap(a.genes, b.genes);
  swap(a.gene_scores, b.gene_scores);
  swap(a.datasets, b.datasets);
  swap(a.dataset_weights, b.dataset_weights);
}

QueryResult::QueryResult(const QueryResult& other46) {
  genes = other46.genes;
  gene_scores = other46.gene_scores;
  datasets = other46.datasets;
  dataset_weights = other46.dataset_weights;
}
QueryResult& QueryResult::operator=(const QueryResult& other47) {
  genes = other47.genes;
  gene_scores = other47.gene_scores;
  datasets = other47.datasets;
  dataset_weights = other47.dataset_weights;
  return *this;
}
void QueryResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryResult(";
  out << "genes=" << to_string(genes);
  out << ", " << "gene_scores=" << to_string(gene_scores);
  out << ", " << "datasets=" << to_string(datasets);
  out << ", " << "dataset_weights=" << to_string(dataset_weights);
  out << ")";
}

} // namespace
