/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "seek_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace SeekRPC {

int _kSearchMethodValues[] = {
  SearchMethod::CV,
  SearchMethod::CVCustom,
  SearchMethod::EqualWeighting,
  SearchMethod::OrderStatistics
};
const char* _kSearchMethodNames[] = {
  "CV",
  "CVCustom",
  "EqualWeighting",
  "OrderStatistics"
};
const std::map<int, const char*> _SearchMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSearchMethodValues, _kSearchMethodNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const SearchMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _SearchMethod_VALUES_TO_NAMES.find(val);
  if (it != _SearchMethod_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const SearchMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _SearchMethod_VALUES_TO_NAMES.find(val);
  if (it != _SearchMethod_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kDistanceMeasureValues[] = {
  DistanceMeasure::ZScore,
  DistanceMeasure::ZScoreHubbinessCorrected,
  DistanceMeasure::Correlation
};
const char* _kDistanceMeasureNames[] = {
  "ZScore",
  "ZScoreHubbinessCorrected",
  "Correlation"
};
const std::map<int, const char*> _DistanceMeasure_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDistanceMeasureValues, _kDistanceMeasureNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const DistanceMeasure::type& val) {
  std::map<int, const char*>::const_iterator it = _DistanceMeasure_VALUES_TO_NAMES.find(val);
  if (it != _DistanceMeasure_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const DistanceMeasure::type& val) {
  std::map<int, const char*>::const_iterator it = _DistanceMeasure_VALUES_TO_NAMES.find(val);
  if (it != _DistanceMeasure_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kQueryStatusValues[] = {
  QueryStatus::Complete,
  QueryStatus::Incomplete,
  QueryStatus::Error
};
const char* _kQueryStatusNames[] = {
  "Complete",
  "Incomplete",
  "Error"
};
const std::map<int, const char*> _QueryStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kQueryStatusValues, _kQueryStatusNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const QueryStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryStatus_VALUES_TO_NAMES.find(val);
  if (it != _QueryStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const QueryStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryStatus_VALUES_TO_NAMES.find(val);
  if (it != _QueryStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


QueryParams::~QueryParams() noexcept {
}


void QueryParams::__set_searchMethod(const SearchMethod::type val) {
  this->searchMethod = val;
__isset.searchMethod = true;
}

void QueryParams::__set_distanceMeasure(const DistanceMeasure::type val) {
  this->distanceMeasure = val;
__isset.distanceMeasure = true;
}

void QueryParams::__set_minQueryGenesFraction(const double val) {
  this->minQueryGenesFraction = val;
__isset.minQueryGenesFraction = true;
}

void QueryParams::__set_minGenomeFraction(const double val) {
  this->minGenomeFraction = val;
__isset.minGenomeFraction = true;
}

void QueryParams::__set_rbpParam(const double val) {
  this->rbpParam = val;
__isset.rbpParam = true;
}

void QueryParams::__set_useNegativeCorrelation(const bool val) {
  this->useNegativeCorrelation = val;
__isset.useNegativeCorrelation = true;
}

void QueryParams::__set_checkDatasetSize(const bool val) {
  this->checkDatasetSize = val;
__isset.checkDatasetSize = true;
}

void QueryParams::__set_useGeneSymbols(const bool val) {
  this->useGeneSymbols = val;
__isset.useGeneSymbols = true;
}

void QueryParams::__set_simulateWeights(const bool val) {
  this->simulateWeights = val;
__isset.simulateWeights = true;
}
std::ostream& operator<<(std::ostream& out, const QueryParams& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->searchMethod = (SearchMethod::type)ecast0;
          this->__isset.searchMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->distanceMeasure = (DistanceMeasure::type)ecast1;
          this->__isset.distanceMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minQueryGenesFraction);
          this->__isset.minQueryGenesFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minGenomeFraction);
          this->__isset.minGenomeFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rbpParam);
          this->__isset.rbpParam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useNegativeCorrelation);
          this->__isset.useNegativeCorrelation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->checkDatasetSize);
          this->__isset.checkDatasetSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useGeneSymbols);
          this->__isset.useGeneSymbols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simulateWeights);
          this->__isset.simulateWeights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QueryParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryParams");

  if (this->__isset.searchMethod) {
    xfer += oprot->writeFieldBegin("searchMethod", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->searchMethod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.distanceMeasure) {
    xfer += oprot->writeFieldBegin("distanceMeasure", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->distanceMeasure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minQueryGenesFraction) {
    xfer += oprot->writeFieldBegin("minQueryGenesFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->minQueryGenesFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minGenomeFraction) {
    xfer += oprot->writeFieldBegin("minGenomeFraction", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->minGenomeFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rbpParam) {
    xfer += oprot->writeFieldBegin("rbpParam", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->rbpParam);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useNegativeCorrelation) {
    xfer += oprot->writeFieldBegin("useNegativeCorrelation", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->useNegativeCorrelation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.checkDatasetSize) {
    xfer += oprot->writeFieldBegin("checkDatasetSize", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->checkDatasetSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useGeneSymbols) {
    xfer += oprot->writeFieldBegin("useGeneSymbols", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->useGeneSymbols);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.simulateWeights) {
    xfer += oprot->writeFieldBegin("simulateWeights", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->simulateWeights);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryParams &a, QueryParams &b) {
  using ::std::swap;
  swap(a.searchMethod, b.searchMethod);
  swap(a.distanceMeasure, b.distanceMeasure);
  swap(a.minQueryGenesFraction, b.minQueryGenesFraction);
  swap(a.minGenomeFraction, b.minGenomeFraction);
  swap(a.rbpParam, b.rbpParam);
  swap(a.useNegativeCorrelation, b.useNegativeCorrelation);
  swap(a.checkDatasetSize, b.checkDatasetSize);
  swap(a.useGeneSymbols, b.useGeneSymbols);
  swap(a.simulateWeights, b.simulateWeights);
  swap(a.__isset, b.__isset);
}

QueryParams::QueryParams(const QueryParams& other2) {
  searchMethod = other2.searchMethod;
  distanceMeasure = other2.distanceMeasure;
  minQueryGenesFraction = other2.minQueryGenesFraction;
  minGenomeFraction = other2.minGenomeFraction;
  rbpParam = other2.rbpParam;
  useNegativeCorrelation = other2.useNegativeCorrelation;
  checkDatasetSize = other2.checkDatasetSize;
  useGeneSymbols = other2.useGeneSymbols;
  simulateWeights = other2.simulateWeights;
  __isset = other2.__isset;
}
QueryParams& QueryParams::operator=(const QueryParams& other3) {
  searchMethod = other3.searchMethod;
  distanceMeasure = other3.distanceMeasure;
  minQueryGenesFraction = other3.minQueryGenesFraction;
  minGenomeFraction = other3.minGenomeFraction;
  rbpParam = other3.rbpParam;
  useNegativeCorrelation = other3.useNegativeCorrelation;
  checkDatasetSize = other3.checkDatasetSize;
  useGeneSymbols = other3.useGeneSymbols;
  simulateWeights = other3.simulateWeights;
  __isset = other3.__isset;
  return *this;
}
void QueryParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryParams(";
  out << "searchMethod="; (__isset.searchMethod ? (out << to_string(searchMethod)) : (out << "<null>"));
  out << ", " << "distanceMeasure="; (__isset.distanceMeasure ? (out << to_string(distanceMeasure)) : (out << "<null>"));
  out << ", " << "minQueryGenesFraction="; (__isset.minQueryGenesFraction ? (out << to_string(minQueryGenesFraction)) : (out << "<null>"));
  out << ", " << "minGenomeFraction="; (__isset.minGenomeFraction ? (out << to_string(minGenomeFraction)) : (out << "<null>"));
  out << ", " << "rbpParam="; (__isset.rbpParam ? (out << to_string(rbpParam)) : (out << "<null>"));
  out << ", " << "useNegativeCorrelation="; (__isset.useNegativeCorrelation ? (out << to_string(useNegativeCorrelation)) : (out << "<null>"));
  out << ", " << "checkDatasetSize="; (__isset.checkDatasetSize ? (out << to_string(checkDatasetSize)) : (out << "<null>"));
  out << ", " << "useGeneSymbols="; (__isset.useGeneSymbols ? (out << to_string(useGeneSymbols)) : (out << "<null>"));
  out << ", " << "simulateWeights="; (__isset.simulateWeights ? (out << to_string(simulateWeights)) : (out << "<null>"));
  out << ")";
}


SeekQuery::~SeekQuery() noexcept {
}


void SeekQuery::__set_species(const std::string& val) {
  this->species = val;
}

void SeekQuery::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
}

void SeekQuery::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
__isset.datasets = true;
}

void SeekQuery::__set_parameters(const QueryParams& val) {
  this->parameters = val;
__isset.parameters = true;
}

void SeekQuery::__set_guideGenes(const std::vector<std::string> & val) {
  this->guideGenes = val;
__isset.guideGenes = true;
}

void SeekQuery::__set_outputDir(const std::string& val) {
  this->outputDir = val;
__isset.outputDir = true;
}
std::ostream& operator<<(std::ostream& out, const SeekQuery& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SeekQuery::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_species = false;
  bool isset_genes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->genes.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readString(this->genes[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          isset_genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size9;
            ::apache::thrift::protocol::TType _etype12;
            xfer += iprot->readListBegin(_etype12, _size9);
            this->datasets.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += iprot->readString(this->datasets[_i13]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameters.read(iprot);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guideGenes.clear();
            uint32_t _size14;
            ::apache::thrift::protocol::TType _etype17;
            xfer += iprot->readListBegin(_etype17, _size14);
            this->guideGenes.resize(_size14);
            uint32_t _i18;
            for (_i18 = 0; _i18 < _size14; ++_i18)
            {
              xfer += iprot->readString(this->guideGenes[_i18]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guideGenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputDir);
          this->__isset.outputDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_genes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SeekQuery::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SeekQuery");

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
    std::vector<std::string> ::const_iterator _iter19;
    for (_iter19 = this->genes.begin(); _iter19 != this->genes.end(); ++_iter19)
    {
      xfer += oprot->writeString((*_iter19));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datasets) {
    xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
      std::vector<std::string> ::const_iterator _iter20;
      for (_iter20 = this->datasets.begin(); _iter20 != this->datasets.end(); ++_iter20)
      {
        xfer += oprot->writeString((*_iter20));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->parameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guideGenes) {
    xfer += oprot->writeFieldBegin("guideGenes", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->guideGenes.size()));
      std::vector<std::string> ::const_iterator _iter21;
      for (_iter21 = this->guideGenes.begin(); _iter21 != this->guideGenes.end(); ++_iter21)
      {
        xfer += oprot->writeString((*_iter21));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputDir) {
    xfer += oprot->writeFieldBegin("outputDir", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->outputDir);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SeekQuery &a, SeekQuery &b) {
  using ::std::swap;
  swap(a.species, b.species);
  swap(a.genes, b.genes);
  swap(a.datasets, b.datasets);
  swap(a.parameters, b.parameters);
  swap(a.guideGenes, b.guideGenes);
  swap(a.outputDir, b.outputDir);
  swap(a.__isset, b.__isset);
}

SeekQuery::SeekQuery(const SeekQuery& other22) {
  species = other22.species;
  genes = other22.genes;
  datasets = other22.datasets;
  parameters = other22.parameters;
  guideGenes = other22.guideGenes;
  outputDir = other22.outputDir;
  __isset = other22.__isset;
}
SeekQuery& SeekQuery::operator=(const SeekQuery& other23) {
  species = other23.species;
  genes = other23.genes;
  datasets = other23.datasets;
  parameters = other23.parameters;
  guideGenes = other23.guideGenes;
  outputDir = other23.outputDir;
  __isset = other23.__isset;
  return *this;
}
void SeekQuery::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeekQuery(";
  out << "species=" << to_string(species);
  out << ", " << "genes=" << to_string(genes);
  out << ", " << "datasets="; (__isset.datasets ? (out << to_string(datasets)) : (out << "<null>"));
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ", " << "guideGenes="; (__isset.guideGenes ? (out << to_string(guideGenes)) : (out << "<null>"));
  out << ", " << "outputDir="; (__isset.outputDir ? (out << to_string(outputDir)) : (out << "<null>"));
  out << ")";
}


StringDoublePair::~StringDoublePair() noexcept {
}


void StringDoublePair::__set_name(const std::string& val) {
  this->name = val;
}

void StringDoublePair::__set_value(const double val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const StringDoublePair& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StringDoublePair::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StringDoublePair::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StringDoublePair");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StringDoublePair &a, StringDoublePair &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
}

StringDoublePair::StringDoublePair(const StringDoublePair& other24) {
  name = other24.name;
  value = other24.value;
}
StringDoublePair& StringDoublePair::operator=(const StringDoublePair& other25) {
  name = other25.name;
  value = other25.value;
  return *this;
}
void StringDoublePair::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringDoublePair(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


QueryResult::~QueryResult() noexcept {
}


void QueryResult::__set_success(const bool val) {
  this->success = val;
}

void QueryResult::__set_geneScores(const std::vector<StringDoublePair> & val) {
  this->geneScores = val;
}

void QueryResult::__set_datasetWeights(const std::vector<StringDoublePair> & val) {
  this->datasetWeights = val;
__isset.datasetWeights = true;
}

void QueryResult::__set_status(const QueryStatus::type val) {
  this->status = val;
__isset.status = true;
}

void QueryResult::__set_statusMsg(const std::string& val) {
  this->statusMsg = val;
__isset.statusMsg = true;
}
std::ostream& operator<<(std::ostream& out, const QueryResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t QueryResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_success = false;
  bool isset_geneScores = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          isset_success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneScores.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->geneScores.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->geneScores[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_geneScores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasetWeights.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->datasetWeights.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->datasetWeights[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datasetWeights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->status = (QueryStatus::type)ecast36;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMsg);
          this->__isset.statusMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_geneScores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t QueryResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("QueryResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geneScores", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->geneScores.size()));
    std::vector<StringDoublePair> ::const_iterator _iter37;
    for (_iter37 = this->geneScores.begin(); _iter37 != this->geneScores.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datasetWeights) {
    xfer += oprot->writeFieldBegin("datasetWeights", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->datasetWeights.size()));
      std::vector<StringDoublePair> ::const_iterator _iter38;
      for (_iter38 = this->datasetWeights.begin(); _iter38 != this->datasetWeights.end(); ++_iter38)
      {
        xfer += (*_iter38).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statusMsg) {
    xfer += oprot->writeFieldBegin("statusMsg", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->statusMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(QueryResult &a, QueryResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.geneScores, b.geneScores);
  swap(a.datasetWeights, b.datasetWeights);
  swap(a.status, b.status);
  swap(a.statusMsg, b.statusMsg);
  swap(a.__isset, b.__isset);
}

QueryResult::QueryResult(const QueryResult& other39) {
  success = other39.success;
  geneScores = other39.geneScores;
  datasetWeights = other39.datasetWeights;
  status = other39.status;
  statusMsg = other39.statusMsg;
  __isset = other39.__isset;
}
QueryResult& QueryResult::operator=(const QueryResult& other40) {
  success = other40.success;
  geneScores = other40.geneScores;
  datasetWeights = other40.datasetWeights;
  status = other40.status;
  statusMsg = other40.statusMsg;
  __isset = other40.__isset;
  return *this;
}
void QueryResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "QueryResult(";
  out << "success=" << to_string(success);
  out << ", " << "geneScores=" << to_string(geneScores);
  out << ", " << "datasetWeights="; (__isset.datasetWeights ? (out << to_string(datasetWeights)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "statusMsg="; (__isset.statusMsg ? (out << to_string(statusMsg)) : (out << "<null>"));
  out << ")";
}

} // namespace
