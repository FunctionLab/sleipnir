/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "seek_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace SeekRPC {

int _kQueryStatusValues[] = {
  QueryStatus::Complete,
  QueryStatus::Incomplete,
  QueryStatus::Error
};
const char* _kQueryStatusNames[] = {
  "Complete",
  "Incomplete",
  "Error"
};
const std::map<int, const char*> _QueryStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kQueryStatusValues, _kQueryStatusNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const QueryStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryStatus_VALUES_TO_NAMES.find(val);
  if (it != _QueryStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const QueryStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _QueryStatus_VALUES_TO_NAMES.find(val);
  if (it != _QueryStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kSearchMethodValues[] = {
  SearchMethod::CV,
  SearchMethod::CVCustom,
  SearchMethod::EqualWeighting,
  SearchMethod::OrderStatistics
};
const char* _kSearchMethodNames[] = {
  "CV",
  "CVCustom",
  "EqualWeighting",
  "OrderStatistics"
};
const std::map<int, const char*> _SearchMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kSearchMethodValues, _kSearchMethodNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const SearchMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _SearchMethod_VALUES_TO_NAMES.find(val);
  if (it != _SearchMethod_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const SearchMethod::type& val) {
  std::map<int, const char*>::const_iterator it = _SearchMethod_VALUES_TO_NAMES.find(val);
  if (it != _SearchMethod_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}

int _kDistanceMeasureValues[] = {
  DistanceMeasure::ZScore,
  DistanceMeasure::ZScoreHubbinessCorrected,
  DistanceMeasure::Correlation
};
const char* _kDistanceMeasureNames[] = {
  "ZScore",
  "ZScoreHubbinessCorrected",
  "Correlation"
};
const std::map<int, const char*> _DistanceMeasure_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kDistanceMeasureValues, _kDistanceMeasureNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const DistanceMeasure::type& val) {
  std::map<int, const char*>::const_iterator it = _DistanceMeasure_VALUES_TO_NAMES.find(val);
  if (it != _DistanceMeasure_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const DistanceMeasure::type& val) {
  std::map<int, const char*>::const_iterator it = _DistanceMeasure_VALUES_TO_NAMES.find(val);
  if (it != _DistanceMeasure_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


StringDoublePair::~StringDoublePair() noexcept {
}


void StringDoublePair::__set_name(const std::string& val) {
  this->name = val;
}

void StringDoublePair::__set_value(const double val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const StringDoublePair& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t StringDoublePair::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t StringDoublePair::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("StringDoublePair");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StringDoublePair &a, StringDoublePair &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.value, b.value);
}

StringDoublePair::StringDoublePair(const StringDoublePair& other0) {
  name = other0.name;
  value = other0.value;
}
StringDoublePair& StringDoublePair::operator=(const StringDoublePair& other1) {
  name = other1.name;
  value = other1.value;
  return *this;
}
void StringDoublePair::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "StringDoublePair(";
  out << "name=" << to_string(name);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


SeekQueryParams::~SeekQueryParams() noexcept {
}


void SeekQueryParams::__set_searchMethod(const SearchMethod::type val) {
  this->searchMethod = val;
__isset.searchMethod = true;
}

void SeekQueryParams::__set_distanceMeasure(const DistanceMeasure::type val) {
  this->distanceMeasure = val;
__isset.distanceMeasure = true;
}

void SeekQueryParams::__set_minQueryGenesFraction(const double val) {
  this->minQueryGenesFraction = val;
__isset.minQueryGenesFraction = true;
}

void SeekQueryParams::__set_minGenomeFraction(const double val) {
  this->minGenomeFraction = val;
__isset.minGenomeFraction = true;
}

void SeekQueryParams::__set_rbpParam(const double val) {
  this->rbpParam = val;
__isset.rbpParam = true;
}

void SeekQueryParams::__set_useNegativeCorrelation(const bool val) {
  this->useNegativeCorrelation = val;
__isset.useNegativeCorrelation = true;
}

void SeekQueryParams::__set_checkDatasetSize(const bool val) {
  this->checkDatasetSize = val;
__isset.checkDatasetSize = true;
}

void SeekQueryParams::__set_useGeneSymbols(const bool val) {
  this->useGeneSymbols = val;
__isset.useGeneSymbols = true;
}

void SeekQueryParams::__set_simulateWeights(const bool val) {
  this->simulateWeights = val;
__isset.simulateWeights = true;
}
std::ostream& operator<<(std::ostream& out, const SeekQueryParams& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SeekQueryParams::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->searchMethod = (SearchMethod::type)ecast2;
          this->__isset.searchMethod = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->distanceMeasure = (DistanceMeasure::type)ecast3;
          this->__isset.distanceMeasure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minQueryGenesFraction);
          this->__isset.minQueryGenesFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->minGenomeFraction);
          this->__isset.minGenomeFraction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rbpParam);
          this->__isset.rbpParam = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useNegativeCorrelation);
          this->__isset.useNegativeCorrelation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->checkDatasetSize);
          this->__isset.checkDatasetSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->useGeneSymbols);
          this->__isset.useGeneSymbols = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->simulateWeights);
          this->__isset.simulateWeights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SeekQueryParams::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SeekQueryParams");

  if (this->__isset.searchMethod) {
    xfer += oprot->writeFieldBegin("searchMethod", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->searchMethod);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.distanceMeasure) {
    xfer += oprot->writeFieldBegin("distanceMeasure", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->distanceMeasure);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minQueryGenesFraction) {
    xfer += oprot->writeFieldBegin("minQueryGenesFraction", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->minQueryGenesFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.minGenomeFraction) {
    xfer += oprot->writeFieldBegin("minGenomeFraction", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->minGenomeFraction);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rbpParam) {
    xfer += oprot->writeFieldBegin("rbpParam", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->rbpParam);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useNegativeCorrelation) {
    xfer += oprot->writeFieldBegin("useNegativeCorrelation", ::apache::thrift::protocol::T_BOOL, 6);
    xfer += oprot->writeBool(this->useNegativeCorrelation);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.checkDatasetSize) {
    xfer += oprot->writeFieldBegin("checkDatasetSize", ::apache::thrift::protocol::T_BOOL, 7);
    xfer += oprot->writeBool(this->checkDatasetSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useGeneSymbols) {
    xfer += oprot->writeFieldBegin("useGeneSymbols", ::apache::thrift::protocol::T_BOOL, 8);
    xfer += oprot->writeBool(this->useGeneSymbols);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.simulateWeights) {
    xfer += oprot->writeFieldBegin("simulateWeights", ::apache::thrift::protocol::T_BOOL, 9);
    xfer += oprot->writeBool(this->simulateWeights);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SeekQueryParams &a, SeekQueryParams &b) {
  using ::std::swap;
  swap(a.searchMethod, b.searchMethod);
  swap(a.distanceMeasure, b.distanceMeasure);
  swap(a.minQueryGenesFraction, b.minQueryGenesFraction);
  swap(a.minGenomeFraction, b.minGenomeFraction);
  swap(a.rbpParam, b.rbpParam);
  swap(a.useNegativeCorrelation, b.useNegativeCorrelation);
  swap(a.checkDatasetSize, b.checkDatasetSize);
  swap(a.useGeneSymbols, b.useGeneSymbols);
  swap(a.simulateWeights, b.simulateWeights);
  swap(a.__isset, b.__isset);
}

SeekQueryParams::SeekQueryParams(const SeekQueryParams& other4) {
  searchMethod = other4.searchMethod;
  distanceMeasure = other4.distanceMeasure;
  minQueryGenesFraction = other4.minQueryGenesFraction;
  minGenomeFraction = other4.minGenomeFraction;
  rbpParam = other4.rbpParam;
  useNegativeCorrelation = other4.useNegativeCorrelation;
  checkDatasetSize = other4.checkDatasetSize;
  useGeneSymbols = other4.useGeneSymbols;
  simulateWeights = other4.simulateWeights;
  __isset = other4.__isset;
}
SeekQueryParams& SeekQueryParams::operator=(const SeekQueryParams& other5) {
  searchMethod = other5.searchMethod;
  distanceMeasure = other5.distanceMeasure;
  minQueryGenesFraction = other5.minQueryGenesFraction;
  minGenomeFraction = other5.minGenomeFraction;
  rbpParam = other5.rbpParam;
  useNegativeCorrelation = other5.useNegativeCorrelation;
  checkDatasetSize = other5.checkDatasetSize;
  useGeneSymbols = other5.useGeneSymbols;
  simulateWeights = other5.simulateWeights;
  __isset = other5.__isset;
  return *this;
}
void SeekQueryParams::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeekQueryParams(";
  out << "searchMethod="; (__isset.searchMethod ? (out << to_string(searchMethod)) : (out << "<null>"));
  out << ", " << "distanceMeasure="; (__isset.distanceMeasure ? (out << to_string(distanceMeasure)) : (out << "<null>"));
  out << ", " << "minQueryGenesFraction="; (__isset.minQueryGenesFraction ? (out << to_string(minQueryGenesFraction)) : (out << "<null>"));
  out << ", " << "minGenomeFraction="; (__isset.minGenomeFraction ? (out << to_string(minGenomeFraction)) : (out << "<null>"));
  out << ", " << "rbpParam="; (__isset.rbpParam ? (out << to_string(rbpParam)) : (out << "<null>"));
  out << ", " << "useNegativeCorrelation="; (__isset.useNegativeCorrelation ? (out << to_string(useNegativeCorrelation)) : (out << "<null>"));
  out << ", " << "checkDatasetSize="; (__isset.checkDatasetSize ? (out << to_string(checkDatasetSize)) : (out << "<null>"));
  out << ", " << "useGeneSymbols="; (__isset.useGeneSymbols ? (out << to_string(useGeneSymbols)) : (out << "<null>"));
  out << ", " << "simulateWeights="; (__isset.simulateWeights ? (out << to_string(simulateWeights)) : (out << "<null>"));
  out << ")";
}


SeekQueryArgs::~SeekQueryArgs() noexcept {
}


void SeekQueryArgs::__set_species(const std::string& val) {
  this->species = val;
}

void SeekQueryArgs::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
}

void SeekQueryArgs::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
__isset.datasets = true;
}

void SeekQueryArgs::__set_parameters(const SeekQueryParams& val) {
  this->parameters = val;
__isset.parameters = true;
}

void SeekQueryArgs::__set_guideGenes(const std::vector<std::string> & val) {
  this->guideGenes = val;
__isset.guideGenes = true;
}

void SeekQueryArgs::__set_outputDir(const std::string& val) {
  this->outputDir = val;
__isset.outputDir = true;
}
std::ostream& operator<<(std::ostream& out, const SeekQueryArgs& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SeekQueryArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_species = false;
  bool isset_genes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->genes.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readString(this->genes[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          isset_genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size11;
            ::apache::thrift::protocol::TType _etype14;
            xfer += iprot->readListBegin(_etype14, _size11);
            this->datasets.resize(_size11);
            uint32_t _i15;
            for (_i15 = 0; _i15 < _size11; ++_i15)
            {
              xfer += iprot->readString(this->datasets[_i15]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->parameters.read(iprot);
          this->__isset.parameters = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->guideGenes.clear();
            uint32_t _size16;
            ::apache::thrift::protocol::TType _etype19;
            xfer += iprot->readListBegin(_etype19, _size16);
            this->guideGenes.resize(_size16);
            uint32_t _i20;
            for (_i20 = 0; _i20 < _size16; ++_i20)
            {
              xfer += iprot->readString(this->guideGenes[_i20]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.guideGenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputDir);
          this->__isset.outputDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_genes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SeekQueryArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SeekQueryArgs");

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
    std::vector<std::string> ::const_iterator _iter21;
    for (_iter21 = this->genes.begin(); _iter21 != this->genes.end(); ++_iter21)
    {
      xfer += oprot->writeString((*_iter21));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datasets) {
    xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
      std::vector<std::string> ::const_iterator _iter22;
      for (_iter22 = this->datasets.begin(); _iter22 != this->datasets.end(); ++_iter22)
      {
        xfer += oprot->writeString((*_iter22));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.parameters) {
    xfer += oprot->writeFieldBegin("parameters", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->parameters.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guideGenes) {
    xfer += oprot->writeFieldBegin("guideGenes", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->guideGenes.size()));
      std::vector<std::string> ::const_iterator _iter23;
      for (_iter23 = this->guideGenes.begin(); _iter23 != this->guideGenes.end(); ++_iter23)
      {
        xfer += oprot->writeString((*_iter23));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputDir) {
    xfer += oprot->writeFieldBegin("outputDir", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->outputDir);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SeekQueryArgs &a, SeekQueryArgs &b) {
  using ::std::swap;
  swap(a.species, b.species);
  swap(a.genes, b.genes);
  swap(a.datasets, b.datasets);
  swap(a.parameters, b.parameters);
  swap(a.guideGenes, b.guideGenes);
  swap(a.outputDir, b.outputDir);
  swap(a.__isset, b.__isset);
}

SeekQueryArgs::SeekQueryArgs(const SeekQueryArgs& other24) {
  species = other24.species;
  genes = other24.genes;
  datasets = other24.datasets;
  parameters = other24.parameters;
  guideGenes = other24.guideGenes;
  outputDir = other24.outputDir;
  __isset = other24.__isset;
}
SeekQueryArgs& SeekQueryArgs::operator=(const SeekQueryArgs& other25) {
  species = other25.species;
  genes = other25.genes;
  datasets = other25.datasets;
  parameters = other25.parameters;
  guideGenes = other25.guideGenes;
  outputDir = other25.outputDir;
  __isset = other25.__isset;
  return *this;
}
void SeekQueryArgs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeekQueryArgs(";
  out << "species=" << to_string(species);
  out << ", " << "genes=" << to_string(genes);
  out << ", " << "datasets="; (__isset.datasets ? (out << to_string(datasets)) : (out << "<null>"));
  out << ", " << "parameters="; (__isset.parameters ? (out << to_string(parameters)) : (out << "<null>"));
  out << ", " << "guideGenes="; (__isset.guideGenes ? (out << to_string(guideGenes)) : (out << "<null>"));
  out << ", " << "outputDir="; (__isset.outputDir ? (out << to_string(outputDir)) : (out << "<null>"));
  out << ")";
}


SeekResult::~SeekResult() noexcept {
}


void SeekResult::__set_success(const bool val) {
  this->success = val;
}

void SeekResult::__set_geneScores(const std::vector<StringDoublePair> & val) {
  this->geneScores = val;
}

void SeekResult::__set_datasetWeights(const std::vector<StringDoublePair> & val) {
  this->datasetWeights = val;
__isset.datasetWeights = true;
}

void SeekResult::__set_status(const QueryStatus::type val) {
  this->status = val;
__isset.status = true;
}

void SeekResult::__set_statusMsg(const std::string& val) {
  this->statusMsg = val;
__isset.statusMsg = true;
}
std::ostream& operator<<(std::ostream& out, const SeekResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SeekResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_success = false;
  bool isset_geneScores = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          isset_success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneScores.clear();
            uint32_t _size26;
            ::apache::thrift::protocol::TType _etype29;
            xfer += iprot->readListBegin(_etype29, _size26);
            this->geneScores.resize(_size26);
            uint32_t _i30;
            for (_i30 = 0; _i30 < _size26; ++_i30)
            {
              xfer += this->geneScores[_i30].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          isset_geneScores = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasetWeights.clear();
            uint32_t _size31;
            ::apache::thrift::protocol::TType _etype34;
            xfer += iprot->readListBegin(_etype34, _size31);
            this->datasetWeights.resize(_size31);
            uint32_t _i35;
            for (_i35 = 0; _i35 < _size31; ++_i35)
            {
              xfer += this->datasetWeights[_i35].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.datasetWeights = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast36;
          xfer += iprot->readI32(ecast36);
          this->status = (QueryStatus::type)ecast36;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMsg);
          this->__isset.statusMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_geneScores)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t SeekResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SeekResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("geneScores", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->geneScores.size()));
    std::vector<StringDoublePair> ::const_iterator _iter37;
    for (_iter37 = this->geneScores.begin(); _iter37 != this->geneScores.end(); ++_iter37)
    {
      xfer += (*_iter37).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.datasetWeights) {
    xfer += oprot->writeFieldBegin("datasetWeights", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->datasetWeights.size()));
      std::vector<StringDoublePair> ::const_iterator _iter38;
      for (_iter38 = this->datasetWeights.begin(); _iter38 != this->datasetWeights.end(); ++_iter38)
      {
        xfer += (*_iter38).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statusMsg) {
    xfer += oprot->writeFieldBegin("statusMsg", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->statusMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SeekResult &a, SeekResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.geneScores, b.geneScores);
  swap(a.datasetWeights, b.datasetWeights);
  swap(a.status, b.status);
  swap(a.statusMsg, b.statusMsg);
  swap(a.__isset, b.__isset);
}

SeekResult::SeekResult(const SeekResult& other39) {
  success = other39.success;
  geneScores = other39.geneScores;
  datasetWeights = other39.datasetWeights;
  status = other39.status;
  statusMsg = other39.statusMsg;
  __isset = other39.__isset;
}
SeekResult& SeekResult::operator=(const SeekResult& other40) {
  success = other40.success;
  geneScores = other40.geneScores;
  datasetWeights = other40.datasetWeights;
  status = other40.status;
  statusMsg = other40.statusMsg;
  __isset = other40.__isset;
  return *this;
}
void SeekResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SeekResult(";
  out << "success=" << to_string(success);
  out << ", " << "geneScores=" << to_string(geneScores);
  out << ", " << "datasetWeights="; (__isset.datasetWeights ? (out << to_string(datasetWeights)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "statusMsg="; (__isset.statusMsg ? (out << to_string(statusMsg)) : (out << "<null>"));
  out << ")";
}


PclSettings::~PclSettings() noexcept {
}


void PclSettings::__set_outputNormalized(const bool val) {
  this->outputNormalized = val;
__isset.outputNormalized = true;
}

void PclSettings::__set_outputGeneExpression(const bool val) {
  this->outputGeneExpression = val;
__isset.outputGeneExpression = true;
}

void PclSettings::__set_outputQueryExpression(const bool val) {
  this->outputQueryExpression = val;
__isset.outputQueryExpression = true;
}

void PclSettings::__set_outputGeneCoexpression(const bool val) {
  this->outputGeneCoexpression = val;
__isset.outputGeneCoexpression = true;
}

void PclSettings::__set_outputQueryCoexpression(const bool val) {
  this->outputQueryCoexpression = val;
__isset.outputQueryCoexpression = true;
}

void PclSettings::__set_rbp(const double val) {
  this->rbp = val;
__isset.rbp = true;
}
std::ostream& operator<<(std::ostream& out, const PclSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputNormalized);
          this->__isset.outputNormalized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputGeneExpression);
          this->__isset.outputGeneExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputQueryExpression);
          this->__isset.outputQueryExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputGeneCoexpression);
          this->__isset.outputGeneCoexpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputQueryCoexpression);
          this->__isset.outputQueryCoexpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rbp);
          this->__isset.rbp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PclSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclSettings");

  if (this->__isset.outputNormalized) {
    xfer += oprot->writeFieldBegin("outputNormalized", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->outputNormalized);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputGeneExpression) {
    xfer += oprot->writeFieldBegin("outputGeneExpression", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->outputGeneExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputQueryExpression) {
    xfer += oprot->writeFieldBegin("outputQueryExpression", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->outputQueryExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputGeneCoexpression) {
    xfer += oprot->writeFieldBegin("outputGeneCoexpression", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->outputGeneCoexpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputQueryCoexpression) {
    xfer += oprot->writeFieldBegin("outputQueryCoexpression", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->outputQueryCoexpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rbp) {
    xfer += oprot->writeFieldBegin("rbp", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->rbp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclSettings &a, PclSettings &b) {
  using ::std::swap;
  swap(a.outputNormalized, b.outputNormalized);
  swap(a.outputGeneExpression, b.outputGeneExpression);
  swap(a.outputQueryExpression, b.outputQueryExpression);
  swap(a.outputGeneCoexpression, b.outputGeneCoexpression);
  swap(a.outputQueryCoexpression, b.outputQueryCoexpression);
  swap(a.rbp, b.rbp);
  swap(a.__isset, b.__isset);
}

PclSettings::PclSettings(const PclSettings& other41) {
  outputNormalized = other41.outputNormalized;
  outputGeneExpression = other41.outputGeneExpression;
  outputQueryExpression = other41.outputQueryExpression;
  outputGeneCoexpression = other41.outputGeneCoexpression;
  outputQueryCoexpression = other41.outputQueryCoexpression;
  rbp = other41.rbp;
  __isset = other41.__isset;
}
PclSettings& PclSettings::operator=(const PclSettings& other42) {
  outputNormalized = other42.outputNormalized;
  outputGeneExpression = other42.outputGeneExpression;
  outputQueryExpression = other42.outputQueryExpression;
  outputGeneCoexpression = other42.outputGeneCoexpression;
  outputQueryCoexpression = other42.outputQueryCoexpression;
  rbp = other42.rbp;
  __isset = other42.__isset;
  return *this;
}
void PclSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclSettings(";
  out << "outputNormalized="; (__isset.outputNormalized ? (out << to_string(outputNormalized)) : (out << "<null>"));
  out << ", " << "outputGeneExpression="; (__isset.outputGeneExpression ? (out << to_string(outputGeneExpression)) : (out << "<null>"));
  out << ", " << "outputQueryExpression="; (__isset.outputQueryExpression ? (out << to_string(outputQueryExpression)) : (out << "<null>"));
  out << ", " << "outputGeneCoexpression="; (__isset.outputGeneCoexpression ? (out << to_string(outputGeneCoexpression)) : (out << "<null>"));
  out << ", " << "outputQueryCoexpression="; (__isset.outputQueryCoexpression ? (out << to_string(outputQueryCoexpression)) : (out << "<null>"));
  out << ", " << "rbp="; (__isset.rbp ? (out << to_string(rbp)) : (out << "<null>"));
  out << ")";
}


PclQueryArgs::~PclQueryArgs() noexcept {
}


void PclQueryArgs::__set_species(const std::string& val) {
  this->species = val;
}

void PclQueryArgs::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
}

void PclQueryArgs::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
__isset.genes = true;
}

void PclQueryArgs::__set_queryGenes(const std::vector<std::string> & val) {
  this->queryGenes = val;
__isset.queryGenes = true;
}

void PclQueryArgs::__set_settings(const PclSettings& val) {
  this->settings = val;
__isset.settings = true;
}

void PclQueryArgs::__set_outputDir(const std::string& val) {
  this->outputDir = val;
__isset.outputDir = true;
}
std::ostream& operator<<(std::ostream& out, const PclQueryArgs& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclQueryArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_species = false;
  bool isset_datasets = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->datasets.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readString(this->datasets[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size48;
            ::apache::thrift::protocol::TType _etype51;
            xfer += iprot->readListBegin(_etype51, _size48);
            this->genes.resize(_size48);
            uint32_t _i52;
            for (_i52 = 0; _i52 < _size48; ++_i52)
            {
              xfer += iprot->readString(this->genes[_i52]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryGenes.clear();
            uint32_t _size53;
            ::apache::thrift::protocol::TType _etype56;
            xfer += iprot->readListBegin(_etype56, _size53);
            this->queryGenes.resize(_size53);
            uint32_t _i57;
            for (_i57 = 0; _i57 < _size53; ++_i57)
            {
              xfer += iprot->readString(this->queryGenes[_i57]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryGenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputDir);
          this->__isset.outputDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PclQueryArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclQueryArgs");

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
    std::vector<std::string> ::const_iterator _iter58;
    for (_iter58 = this->datasets.begin(); _iter58 != this->datasets.end(); ++_iter58)
    {
      xfer += oprot->writeString((*_iter58));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.genes) {
    xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
      std::vector<std::string> ::const_iterator _iter59;
      for (_iter59 = this->genes.begin(); _iter59 != this->genes.end(); ++_iter59)
      {
        xfer += oprot->writeString((*_iter59));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryGenes) {
    xfer += oprot->writeFieldBegin("queryGenes", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->queryGenes.size()));
      std::vector<std::string> ::const_iterator _iter60;
      for (_iter60 = this->queryGenes.begin(); _iter60 != this->queryGenes.end(); ++_iter60)
      {
        xfer += oprot->writeString((*_iter60));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.settings) {
    xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->settings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputDir) {
    xfer += oprot->writeFieldBegin("outputDir", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->outputDir);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclQueryArgs &a, PclQueryArgs &b) {
  using ::std::swap;
  swap(a.species, b.species);
  swap(a.datasets, b.datasets);
  swap(a.genes, b.genes);
  swap(a.queryGenes, b.queryGenes);
  swap(a.settings, b.settings);
  swap(a.outputDir, b.outputDir);
  swap(a.__isset, b.__isset);
}

PclQueryArgs::PclQueryArgs(const PclQueryArgs& other61) {
  species = other61.species;
  datasets = other61.datasets;
  genes = other61.genes;
  queryGenes = other61.queryGenes;
  settings = other61.settings;
  outputDir = other61.outputDir;
  __isset = other61.__isset;
}
PclQueryArgs& PclQueryArgs::operator=(const PclQueryArgs& other62) {
  species = other62.species;
  datasets = other62.datasets;
  genes = other62.genes;
  queryGenes = other62.queryGenes;
  settings = other62.settings;
  outputDir = other62.outputDir;
  __isset = other62.__isset;
  return *this;
}
void PclQueryArgs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclQueryArgs(";
  out << "species=" << to_string(species);
  out << ", " << "datasets=" << to_string(datasets);
  out << ", " << "genes="; (__isset.genes ? (out << to_string(genes)) : (out << "<null>"));
  out << ", " << "queryGenes="; (__isset.queryGenes ? (out << to_string(queryGenes)) : (out << "<null>"));
  out << ", " << "settings="; (__isset.settings ? (out << to_string(settings)) : (out << "<null>"));
  out << ", " << "outputDir="; (__isset.outputDir ? (out << to_string(outputDir)) : (out << "<null>"));
  out << ")";
}


PclResult::~PclResult() noexcept {
}


void PclResult::__set_success(const bool val) {
  this->success = val;
}

void PclResult::__set_datasetSizes(const std::vector<int32_t> & val) {
  this->datasetSizes = val;
}

void PclResult::__set_geneExpressions(const std::vector<double> & val) {
  this->geneExpressions = val;
__isset.geneExpressions = true;
}

void PclResult::__set_geneCoexpressions(const std::vector<double> & val) {
  this->geneCoexpressions = val;
__isset.geneCoexpressions = true;
}

void PclResult::__set_queryExpressions(const std::vector<double> & val) {
  this->queryExpressions = val;
__isset.queryExpressions = true;
}

void PclResult::__set_queryCoexpressions(const std::vector<double> & val) {
  this->queryCoexpressions = val;
__isset.queryCoexpressions = true;
}

void PclResult::__set_status(const QueryStatus::type val) {
  this->status = val;
__isset.status = true;
}

void PclResult::__set_statusMsg(const std::string& val) {
  this->statusMsg = val;
__isset.statusMsg = true;
}
std::ostream& operator<<(std::ostream& out, const PclResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_success = false;
  bool isset_datasetSizes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          isset_success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasetSizes.clear();
            uint32_t _size63;
            ::apache::thrift::protocol::TType _etype66;
            xfer += iprot->readListBegin(_etype66, _size63);
            this->datasetSizes.resize(_size63);
            uint32_t _i67;
            for (_i67 = 0; _i67 < _size63; ++_i67)
            {
              xfer += iprot->readI32(this->datasetSizes[_i67]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasetSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneExpressions.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->geneExpressions.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += iprot->readDouble(this->geneExpressions[_i72]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.geneExpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneCoexpressions.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->geneCoexpressions.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readDouble(this->geneCoexpressions[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.geneCoexpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryExpressions.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->queryExpressions.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += iprot->readDouble(this->queryExpressions[_i82]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryExpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryCoexpressions.clear();
            uint32_t _size83;
            ::apache::thrift::protocol::TType _etype86;
            xfer += iprot->readListBegin(_etype86, _size83);
            this->queryCoexpressions.resize(_size83);
            uint32_t _i87;
            for (_i87 = 0; _i87 < _size83; ++_i87)
            {
              xfer += iprot->readDouble(this->queryCoexpressions[_i87]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryCoexpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast88;
          xfer += iprot->readI32(ecast88);
          this->status = (QueryStatus::type)ecast88;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMsg);
          this->__isset.statusMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasetSizes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PclResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasetSizes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->datasetSizes.size()));
    std::vector<int32_t> ::const_iterator _iter89;
    for (_iter89 = this->datasetSizes.begin(); _iter89 != this->datasetSizes.end(); ++_iter89)
    {
      xfer += oprot->writeI32((*_iter89));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.geneExpressions) {
    xfer += oprot->writeFieldBegin("geneExpressions", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->geneExpressions.size()));
      std::vector<double> ::const_iterator _iter90;
      for (_iter90 = this->geneExpressions.begin(); _iter90 != this->geneExpressions.end(); ++_iter90)
      {
        xfer += oprot->writeDouble((*_iter90));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.geneCoexpressions) {
    xfer += oprot->writeFieldBegin("geneCoexpressions", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->geneCoexpressions.size()));
      std::vector<double> ::const_iterator _iter91;
      for (_iter91 = this->geneCoexpressions.begin(); _iter91 != this->geneCoexpressions.end(); ++_iter91)
      {
        xfer += oprot->writeDouble((*_iter91));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryExpressions) {
    xfer += oprot->writeFieldBegin("queryExpressions", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->queryExpressions.size()));
      std::vector<double> ::const_iterator _iter92;
      for (_iter92 = this->queryExpressions.begin(); _iter92 != this->queryExpressions.end(); ++_iter92)
      {
        xfer += oprot->writeDouble((*_iter92));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryCoexpressions) {
    xfer += oprot->writeFieldBegin("queryCoexpressions", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->queryCoexpressions.size()));
      std::vector<double> ::const_iterator _iter93;
      for (_iter93 = this->queryCoexpressions.begin(); _iter93 != this->queryCoexpressions.end(); ++_iter93)
      {
        xfer += oprot->writeDouble((*_iter93));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statusMsg) {
    xfer += oprot->writeFieldBegin("statusMsg", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->statusMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclResult &a, PclResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.datasetSizes, b.datasetSizes);
  swap(a.geneExpressions, b.geneExpressions);
  swap(a.geneCoexpressions, b.geneCoexpressions);
  swap(a.queryExpressions, b.queryExpressions);
  swap(a.queryCoexpressions, b.queryCoexpressions);
  swap(a.status, b.status);
  swap(a.statusMsg, b.statusMsg);
  swap(a.__isset, b.__isset);
}

PclResult::PclResult(const PclResult& other94) {
  success = other94.success;
  datasetSizes = other94.datasetSizes;
  geneExpressions = other94.geneExpressions;
  geneCoexpressions = other94.geneCoexpressions;
  queryExpressions = other94.queryExpressions;
  queryCoexpressions = other94.queryCoexpressions;
  status = other94.status;
  statusMsg = other94.statusMsg;
  __isset = other94.__isset;
}
PclResult& PclResult::operator=(const PclResult& other95) {
  success = other95.success;
  datasetSizes = other95.datasetSizes;
  geneExpressions = other95.geneExpressions;
  geneCoexpressions = other95.geneCoexpressions;
  queryExpressions = other95.queryExpressions;
  queryCoexpressions = other95.queryCoexpressions;
  status = other95.status;
  statusMsg = other95.statusMsg;
  __isset = other95.__isset;
  return *this;
}
void PclResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclResult(";
  out << "success=" << to_string(success);
  out << ", " << "datasetSizes=" << to_string(datasetSizes);
  out << ", " << "geneExpressions="; (__isset.geneExpressions ? (out << to_string(geneExpressions)) : (out << "<null>"));
  out << ", " << "geneCoexpressions="; (__isset.geneCoexpressions ? (out << to_string(geneCoexpressions)) : (out << "<null>"));
  out << ", " << "queryExpressions="; (__isset.queryExpressions ? (out << to_string(queryExpressions)) : (out << "<null>"));
  out << ", " << "queryCoexpressions="; (__isset.queryCoexpressions ? (out << to_string(queryCoexpressions)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "statusMsg="; (__isset.statusMsg ? (out << to_string(statusMsg)) : (out << "<null>"));
  out << ")";
}

} // namespace
