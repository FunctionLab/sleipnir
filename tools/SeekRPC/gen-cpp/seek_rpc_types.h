/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef seek_rpc_TYPES_H
#define seek_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace SeekRPC {

struct QueryStatus {
  enum type {
    Complete = 1,
    Incomplete = 2,
    Error = 3
  };
};

extern const std::map<int, const char*> _QueryStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const QueryStatus::type& val);

std::string to_string(const QueryStatus::type& val);

struct SearchMethod {
  enum type {
    CV = 1,
    CVCustom = 2,
    EqualWeighting = 3,
    OrderStatistics = 4
  };
};

extern const std::map<int, const char*> _SearchMethod_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SearchMethod::type& val);

std::string to_string(const SearchMethod::type& val);

struct DistanceMeasure {
  enum type {
    ZScore = 1,
    ZScoreHubbinessCorrected = 2,
    Correlation = 3
  };
};

extern const std::map<int, const char*> _DistanceMeasure_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DistanceMeasure::type& val);

std::string to_string(const DistanceMeasure::type& val);

class StringDoublePair;

class SeekQueryParams;

class SeekQueryArgs;

class SeekResult;

class PclSettings;

class PclQueryArgs;

class PclResult;

class PValueGeneArgs;

class PValueDatasetArgs;

class PValueResult;


class StringDoublePair : public virtual ::apache::thrift::TBase {
 public:

  StringDoublePair(const StringDoublePair&);
  StringDoublePair& operator=(const StringDoublePair&);
  StringDoublePair() noexcept
                   : name(),
                     value(0) {
  }

  virtual ~StringDoublePair() noexcept;
  std::string name;
  double value;

  void __set_name(const std::string& val);

  void __set_value(const double val);

  bool operator == (const StringDoublePair & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StringDoublePair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StringDoublePair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(StringDoublePair &a, StringDoublePair &b);

std::ostream& operator<<(std::ostream& out, const StringDoublePair& obj);

typedef struct _SeekQueryParams__isset {
  _SeekQueryParams__isset() : searchMethod(true), distanceMeasure(true), minQueryGenesFraction(true), minGenomeFraction(true), rbpParam(true), useNegativeCorrelation(true), checkDatasetSize(true), useGeneSymbols(true), simulateWeights(true) {}
  bool searchMethod :1;
  bool distanceMeasure :1;
  bool minQueryGenesFraction :1;
  bool minGenomeFraction :1;
  bool rbpParam :1;
  bool useNegativeCorrelation :1;
  bool checkDatasetSize :1;
  bool useGeneSymbols :1;
  bool simulateWeights :1;
} _SeekQueryParams__isset;

class SeekQueryParams : public virtual ::apache::thrift::TBase {
 public:

  SeekQueryParams(const SeekQueryParams&) noexcept;
  SeekQueryParams& operator=(const SeekQueryParams&) noexcept;
  SeekQueryParams() noexcept
                  : searchMethod((SearchMethod::type)1),
                    distanceMeasure((DistanceMeasure::type)2),
                    minQueryGenesFraction(0.0000000000000000),
                    minGenomeFraction(0.0000000000000000),
                    rbpParam(0.9900000000000000),
                    useNegativeCorrelation(false),
                    checkDatasetSize(false),
                    useGeneSymbols(false),
                    simulateWeights(false) {
    searchMethod = (SearchMethod::type)1;

    distanceMeasure = (DistanceMeasure::type)2;

  }

  virtual ~SeekQueryParams() noexcept;
  /**
   * 
   * @see SearchMethod
   */
  SearchMethod::type searchMethod;
  /**
   * 
   * @see DistanceMeasure
   */
  DistanceMeasure::type distanceMeasure;
  double minQueryGenesFraction;
  double minGenomeFraction;
  double rbpParam;
  bool useNegativeCorrelation;
  bool checkDatasetSize;
  bool useGeneSymbols;
  bool simulateWeights;

  _SeekQueryParams__isset __isset;

  void __set_searchMethod(const SearchMethod::type val);

  void __set_distanceMeasure(const DistanceMeasure::type val);

  void __set_minQueryGenesFraction(const double val);

  void __set_minGenomeFraction(const double val);

  void __set_rbpParam(const double val);

  void __set_useNegativeCorrelation(const bool val);

  void __set_checkDatasetSize(const bool val);

  void __set_useGeneSymbols(const bool val);

  void __set_simulateWeights(const bool val);

  bool operator == (const SeekQueryParams & rhs) const
  {
    if (__isset.searchMethod != rhs.__isset.searchMethod)
      return false;
    else if (__isset.searchMethod && !(searchMethod == rhs.searchMethod))
      return false;
    if (__isset.distanceMeasure != rhs.__isset.distanceMeasure)
      return false;
    else if (__isset.distanceMeasure && !(distanceMeasure == rhs.distanceMeasure))
      return false;
    if (__isset.minQueryGenesFraction != rhs.__isset.minQueryGenesFraction)
      return false;
    else if (__isset.minQueryGenesFraction && !(minQueryGenesFraction == rhs.minQueryGenesFraction))
      return false;
    if (__isset.minGenomeFraction != rhs.__isset.minGenomeFraction)
      return false;
    else if (__isset.minGenomeFraction && !(minGenomeFraction == rhs.minGenomeFraction))
      return false;
    if (__isset.rbpParam != rhs.__isset.rbpParam)
      return false;
    else if (__isset.rbpParam && !(rbpParam == rhs.rbpParam))
      return false;
    if (__isset.useNegativeCorrelation != rhs.__isset.useNegativeCorrelation)
      return false;
    else if (__isset.useNegativeCorrelation && !(useNegativeCorrelation == rhs.useNegativeCorrelation))
      return false;
    if (__isset.checkDatasetSize != rhs.__isset.checkDatasetSize)
      return false;
    else if (__isset.checkDatasetSize && !(checkDatasetSize == rhs.checkDatasetSize))
      return false;
    if (__isset.useGeneSymbols != rhs.__isset.useGeneSymbols)
      return false;
    else if (__isset.useGeneSymbols && !(useGeneSymbols == rhs.useGeneSymbols))
      return false;
    if (__isset.simulateWeights != rhs.__isset.simulateWeights)
      return false;
    else if (__isset.simulateWeights && !(simulateWeights == rhs.simulateWeights))
      return false;
    return true;
  }
  bool operator != (const SeekQueryParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekQueryParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekQueryParams &a, SeekQueryParams &b);

std::ostream& operator<<(std::ostream& out, const SeekQueryParams& obj);

typedef struct _SeekQueryArgs__isset {
  _SeekQueryArgs__isset() : datasets(false), parameters(false), guideGenes(false), outputDir(true) {}
  bool datasets :1;
  bool parameters :1;
  bool guideGenes :1;
  bool outputDir :1;
} _SeekQueryArgs__isset;

class SeekQueryArgs : public virtual ::apache::thrift::TBase {
 public:

  SeekQueryArgs(const SeekQueryArgs&);
  SeekQueryArgs& operator=(const SeekQueryArgs&);
  SeekQueryArgs() : species("Unknown"),
                    outputDir("/tmp/seek") {
  }

  virtual ~SeekQueryArgs() noexcept;
  std::string species;
  std::vector<std::string>  genes;
  std::vector<std::string>  datasets;
  SeekQueryParams parameters;
  std::vector<std::string>  guideGenes;
  std::string outputDir;

  _SeekQueryArgs__isset __isset;

  void __set_species(const std::string& val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_parameters(const SeekQueryParams& val);

  void __set_guideGenes(const std::vector<std::string> & val);

  void __set_outputDir(const std::string& val);

  bool operator == (const SeekQueryArgs & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (!(genes == rhs.genes))
      return false;
    if (__isset.datasets != rhs.__isset.datasets)
      return false;
    else if (__isset.datasets && !(datasets == rhs.datasets))
      return false;
    if (__isset.parameters != rhs.__isset.parameters)
      return false;
    else if (__isset.parameters && !(parameters == rhs.parameters))
      return false;
    if (__isset.guideGenes != rhs.__isset.guideGenes)
      return false;
    else if (__isset.guideGenes && !(guideGenes == rhs.guideGenes))
      return false;
    if (__isset.outputDir != rhs.__isset.outputDir)
      return false;
    else if (__isset.outputDir && !(outputDir == rhs.outputDir))
      return false;
    return true;
  }
  bool operator != (const SeekQueryArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekQueryArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekQueryArgs &a, SeekQueryArgs &b);

std::ostream& operator<<(std::ostream& out, const SeekQueryArgs& obj);

typedef struct _SeekResult__isset {
  _SeekResult__isset() : datasetWeights(false), status(false), statusMsg(false) {}
  bool datasetWeights :1;
  bool status :1;
  bool statusMsg :1;
} _SeekResult__isset;

class SeekResult : public virtual ::apache::thrift::TBase {
 public:

  SeekResult(const SeekResult&);
  SeekResult& operator=(const SeekResult&);
  SeekResult() noexcept
             : success(0),
               status(static_cast<QueryStatus::type>(0)),
               statusMsg() {
  }

  virtual ~SeekResult() noexcept;
  bool success;
  std::vector<StringDoublePair>  geneScores;
  std::vector<StringDoublePair>  datasetWeights;
  /**
   * 
   * @see QueryStatus
   */
  QueryStatus::type status;
  std::string statusMsg;

  _SeekResult__isset __isset;

  void __set_success(const bool val);

  void __set_geneScores(const std::vector<StringDoublePair> & val);

  void __set_datasetWeights(const std::vector<StringDoublePair> & val);

  void __set_status(const QueryStatus::type val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const SeekResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(geneScores == rhs.geneScores))
      return false;
    if (__isset.datasetWeights != rhs.__isset.datasetWeights)
      return false;
    else if (__isset.datasetWeights && !(datasetWeights == rhs.datasetWeights))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const SeekResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekResult &a, SeekResult &b);

std::ostream& operator<<(std::ostream& out, const SeekResult& obj);

typedef struct _PclSettings__isset {
  _PclSettings__isset() : outputNormalized(true), outputGeneExpression(true), outputQueryExpression(true), outputGeneCoexpression(true), outputQueryCoexpression(true), rbp(true) {}
  bool outputNormalized :1;
  bool outputGeneExpression :1;
  bool outputQueryExpression :1;
  bool outputGeneCoexpression :1;
  bool outputQueryCoexpression :1;
  bool rbp :1;
} _PclSettings__isset;

class PclSettings : public virtual ::apache::thrift::TBase {
 public:

  PclSettings(const PclSettings&) noexcept;
  PclSettings& operator=(const PclSettings&) noexcept;
  PclSettings() noexcept
              : outputNormalized(false),
                outputGeneExpression(false),
                outputQueryExpression(false),
                outputGeneCoexpression(false),
                outputQueryCoexpression(false),
                rbp(0.9900000000000000) {
  }

  virtual ~PclSettings() noexcept;
  bool outputNormalized;
  bool outputGeneExpression;
  bool outputQueryExpression;
  bool outputGeneCoexpression;
  bool outputQueryCoexpression;
  double rbp;

  _PclSettings__isset __isset;

  void __set_outputNormalized(const bool val);

  void __set_outputGeneExpression(const bool val);

  void __set_outputQueryExpression(const bool val);

  void __set_outputGeneCoexpression(const bool val);

  void __set_outputQueryCoexpression(const bool val);

  void __set_rbp(const double val);

  bool operator == (const PclSettings & rhs) const
  {
    if (__isset.outputNormalized != rhs.__isset.outputNormalized)
      return false;
    else if (__isset.outputNormalized && !(outputNormalized == rhs.outputNormalized))
      return false;
    if (__isset.outputGeneExpression != rhs.__isset.outputGeneExpression)
      return false;
    else if (__isset.outputGeneExpression && !(outputGeneExpression == rhs.outputGeneExpression))
      return false;
    if (__isset.outputQueryExpression != rhs.__isset.outputQueryExpression)
      return false;
    else if (__isset.outputQueryExpression && !(outputQueryExpression == rhs.outputQueryExpression))
      return false;
    if (__isset.outputGeneCoexpression != rhs.__isset.outputGeneCoexpression)
      return false;
    else if (__isset.outputGeneCoexpression && !(outputGeneCoexpression == rhs.outputGeneCoexpression))
      return false;
    if (__isset.outputQueryCoexpression != rhs.__isset.outputQueryCoexpression)
      return false;
    else if (__isset.outputQueryCoexpression && !(outputQueryCoexpression == rhs.outputQueryCoexpression))
      return false;
    if (__isset.rbp != rhs.__isset.rbp)
      return false;
    else if (__isset.rbp && !(rbp == rhs.rbp))
      return false;
    return true;
  }
  bool operator != (const PclSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclSettings &a, PclSettings &b);

std::ostream& operator<<(std::ostream& out, const PclSettings& obj);

typedef struct _PclQueryArgs__isset {
  _PclQueryArgs__isset() : genes(false), queryGenes(false), settings(false), outputDir(true) {}
  bool genes :1;
  bool queryGenes :1;
  bool settings :1;
  bool outputDir :1;
} _PclQueryArgs__isset;

class PclQueryArgs : public virtual ::apache::thrift::TBase {
 public:

  PclQueryArgs(const PclQueryArgs&);
  PclQueryArgs& operator=(const PclQueryArgs&);
  PclQueryArgs() : species("Unknown"),
                   outputDir("/tmp/seek") {
  }

  virtual ~PclQueryArgs() noexcept;
  std::string species;
  std::vector<std::string>  datasets;
  std::vector<std::string>  genes;
  std::vector<std::string>  queryGenes;
  PclSettings settings;
  std::string outputDir;

  _PclQueryArgs__isset __isset;

  void __set_species(const std::string& val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_queryGenes(const std::vector<std::string> & val);

  void __set_settings(const PclSettings& val);

  void __set_outputDir(const std::string& val);

  bool operator == (const PclQueryArgs & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (!(datasets == rhs.datasets))
      return false;
    if (__isset.genes != rhs.__isset.genes)
      return false;
    else if (__isset.genes && !(genes == rhs.genes))
      return false;
    if (__isset.queryGenes != rhs.__isset.queryGenes)
      return false;
    else if (__isset.queryGenes && !(queryGenes == rhs.queryGenes))
      return false;
    if (__isset.settings != rhs.__isset.settings)
      return false;
    else if (__isset.settings && !(settings == rhs.settings))
      return false;
    if (__isset.outputDir != rhs.__isset.outputDir)
      return false;
    else if (__isset.outputDir && !(outputDir == rhs.outputDir))
      return false;
    return true;
  }
  bool operator != (const PclQueryArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclQueryArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclQueryArgs &a, PclQueryArgs &b);

std::ostream& operator<<(std::ostream& out, const PclQueryArgs& obj);

typedef struct _PclResult__isset {
  _PclResult__isset() : geneExpressions(false), geneCoexpressions(false), queryExpressions(false), queryCoexpressions(false), status(false), statusMsg(false) {}
  bool geneExpressions :1;
  bool geneCoexpressions :1;
  bool queryExpressions :1;
  bool queryCoexpressions :1;
  bool status :1;
  bool statusMsg :1;
} _PclResult__isset;

class PclResult : public virtual ::apache::thrift::TBase {
 public:

  PclResult(const PclResult&);
  PclResult& operator=(const PclResult&);
  PclResult() noexcept
            : success(0),
              status(static_cast<QueryStatus::type>(0)),
              statusMsg() {
  }

  virtual ~PclResult() noexcept;
  bool success;
  std::vector<int32_t>  datasetSizes;
  std::vector<double>  geneExpressions;
  std::vector<double>  geneCoexpressions;
  std::vector<double>  queryExpressions;
  std::vector<double>  queryCoexpressions;
  /**
   * 
   * @see QueryStatus
   */
  QueryStatus::type status;
  std::string statusMsg;

  _PclResult__isset __isset;

  void __set_success(const bool val);

  void __set_datasetSizes(const std::vector<int32_t> & val);

  void __set_geneExpressions(const std::vector<double> & val);

  void __set_geneCoexpressions(const std::vector<double> & val);

  void __set_queryExpressions(const std::vector<double> & val);

  void __set_queryCoexpressions(const std::vector<double> & val);

  void __set_status(const QueryStatus::type val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const PclResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(datasetSizes == rhs.datasetSizes))
      return false;
    if (__isset.geneExpressions != rhs.__isset.geneExpressions)
      return false;
    else if (__isset.geneExpressions && !(geneExpressions == rhs.geneExpressions))
      return false;
    if (__isset.geneCoexpressions != rhs.__isset.geneCoexpressions)
      return false;
    else if (__isset.geneCoexpressions && !(geneCoexpressions == rhs.geneCoexpressions))
      return false;
    if (__isset.queryExpressions != rhs.__isset.queryExpressions)
      return false;
    else if (__isset.queryExpressions && !(queryExpressions == rhs.queryExpressions))
      return false;
    if (__isset.queryCoexpressions != rhs.__isset.queryCoexpressions)
      return false;
    else if (__isset.queryCoexpressions && !(queryCoexpressions == rhs.queryCoexpressions))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const PclResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclResult &a, PclResult &b);

std::ostream& operator<<(std::ostream& out, const PclResult& obj);

typedef struct _PValueGeneArgs__isset {
  _PValueGeneArgs__isset() : genes(false), geneScores(false), geneRanks(false), useRank(true) {}
  bool genes :1;
  bool geneScores :1;
  bool geneRanks :1;
  bool useRank :1;
} _PValueGeneArgs__isset;

class PValueGeneArgs : public virtual ::apache::thrift::TBase {
 public:

  PValueGeneArgs(const PValueGeneArgs&);
  PValueGeneArgs& operator=(const PValueGeneArgs&);
  PValueGeneArgs() : species("Unknown"),
                     useRank(false) {
  }

  virtual ~PValueGeneArgs() noexcept;
  std::string species;
  std::vector<std::string>  genes;
  std::vector<double>  geneScores;
  std::vector<int32_t>  geneRanks;
  bool useRank;

  _PValueGeneArgs__isset __isset;

  void __set_species(const std::string& val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_geneScores(const std::vector<double> & val);

  void __set_geneRanks(const std::vector<int32_t> & val);

  void __set_useRank(const bool val);

  bool operator == (const PValueGeneArgs & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (__isset.genes != rhs.__isset.genes)
      return false;
    else if (__isset.genes && !(genes == rhs.genes))
      return false;
    if (__isset.geneScores != rhs.__isset.geneScores)
      return false;
    else if (__isset.geneScores && !(geneScores == rhs.geneScores))
      return false;
    if (__isset.geneRanks != rhs.__isset.geneRanks)
      return false;
    else if (__isset.geneRanks && !(geneRanks == rhs.geneRanks))
      return false;
    if (__isset.useRank != rhs.__isset.useRank)
      return false;
    else if (__isset.useRank && !(useRank == rhs.useRank))
      return false;
    return true;
  }
  bool operator != (const PValueGeneArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PValueGeneArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PValueGeneArgs &a, PValueGeneArgs &b);

std::ostream& operator<<(std::ostream& out, const PValueGeneArgs& obj);

typedef struct _PValueDatasetArgs__isset {
  _PValueDatasetArgs__isset() : datasets(false), datasetWeights(false) {}
  bool datasets :1;
  bool datasetWeights :1;
} _PValueDatasetArgs__isset;

class PValueDatasetArgs : public virtual ::apache::thrift::TBase {
 public:

  PValueDatasetArgs(const PValueDatasetArgs&);
  PValueDatasetArgs& operator=(const PValueDatasetArgs&);
  PValueDatasetArgs() : species("Unknown") {
  }

  virtual ~PValueDatasetArgs() noexcept;
  std::string species;
  std::vector<std::string>  datasets;
  std::vector<double>  datasetWeights;

  _PValueDatasetArgs__isset __isset;

  void __set_species(const std::string& val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_datasetWeights(const std::vector<double> & val);

  bool operator == (const PValueDatasetArgs & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (__isset.datasets != rhs.__isset.datasets)
      return false;
    else if (__isset.datasets && !(datasets == rhs.datasets))
      return false;
    if (__isset.datasetWeights != rhs.__isset.datasetWeights)
      return false;
    else if (__isset.datasetWeights && !(datasetWeights == rhs.datasetWeights))
      return false;
    return true;
  }
  bool operator != (const PValueDatasetArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PValueDatasetArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PValueDatasetArgs &a, PValueDatasetArgs &b);

std::ostream& operator<<(std::ostream& out, const PValueDatasetArgs& obj);

typedef struct _PValueResult__isset {
  _PValueResult__isset() : pvalues(false), status(false), statusMsg(false) {}
  bool pvalues :1;
  bool status :1;
  bool statusMsg :1;
} _PValueResult__isset;

class PValueResult : public virtual ::apache::thrift::TBase {
 public:

  PValueResult(const PValueResult&);
  PValueResult& operator=(const PValueResult&);
  PValueResult() noexcept
               : success(0),
                 status(static_cast<QueryStatus::type>(0)),
                 statusMsg() {
  }

  virtual ~PValueResult() noexcept;
  bool success;
  std::vector<double>  pvalues;
  /**
   * 
   * @see QueryStatus
   */
  QueryStatus::type status;
  std::string statusMsg;

  _PValueResult__isset __isset;

  void __set_success(const bool val);

  void __set_pvalues(const std::vector<double> & val);

  void __set_status(const QueryStatus::type val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const PValueResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (__isset.pvalues != rhs.__isset.pvalues)
      return false;
    else if (__isset.pvalues && !(pvalues == rhs.pvalues))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const PValueResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PValueResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot) override;
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const override;

  virtual void printTo(std::ostream& out) const;
};

void swap(PValueResult &a, PValueResult &b);

std::ostream& operator<<(std::ostream& out, const PValueResult& obj);

} // namespace

#endif
