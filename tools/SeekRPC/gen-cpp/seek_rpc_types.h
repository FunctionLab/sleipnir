/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef seek_rpc_TYPES_H
#define seek_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace SeekRPC {

class QueryParams;

class SeekQuery;

class StringDoublePair;

class QueryResult;

typedef struct _QueryParams__isset {
  _QueryParams__isset() : search_method(true), distance_measure(true), min_query_genes_fraction(true), min_genome_fraction(true), rbp_param(true), useNegativeCorrelation(true), check_dataset_size(true), use_gene_symbols(true) {}
  bool search_method :1;
  bool distance_measure :1;
  bool min_query_genes_fraction :1;
  bool min_genome_fraction :1;
  bool rbp_param :1;
  bool useNegativeCorrelation :1;
  bool check_dataset_size :1;
  bool use_gene_symbols :1;
} _QueryParams__isset;

class QueryParams : public virtual ::apache::thrift::TBase {
 public:

  QueryParams(const QueryParams&);
  QueryParams& operator=(const QueryParams&);
  QueryParams() : search_method("CV"), distance_measure("Zscore"), min_query_genes_fraction(0.0000000000000000), min_genome_fraction(0.0000000000000000), rbp_param(0.9900000000000000), useNegativeCorrelation(false), check_dataset_size(false), use_gene_symbols(false) {
  }

  virtual ~QueryParams() noexcept;
  std::string search_method;
  std::string distance_measure;
  double min_query_genes_fraction;
  double min_genome_fraction;
  double rbp_param;
  bool useNegativeCorrelation;
  bool check_dataset_size;
  bool use_gene_symbols;

  _QueryParams__isset __isset;

  void __set_search_method(const std::string& val);

  void __set_distance_measure(const std::string& val);

  void __set_min_query_genes_fraction(const double val);

  void __set_min_genome_fraction(const double val);

  void __set_rbp_param(const double val);

  void __set_useNegativeCorrelation(const bool val);

  void __set_check_dataset_size(const bool val);

  void __set_use_gene_symbols(const bool val);

  bool operator == (const QueryParams & rhs) const
  {
    if (__isset.search_method != rhs.__isset.search_method)
      return false;
    else if (__isset.search_method && !(search_method == rhs.search_method))
      return false;
    if (__isset.distance_measure != rhs.__isset.distance_measure)
      return false;
    else if (__isset.distance_measure && !(distance_measure == rhs.distance_measure))
      return false;
    if (__isset.min_query_genes_fraction != rhs.__isset.min_query_genes_fraction)
      return false;
    else if (__isset.min_query_genes_fraction && !(min_query_genes_fraction == rhs.min_query_genes_fraction))
      return false;
    if (__isset.min_genome_fraction != rhs.__isset.min_genome_fraction)
      return false;
    else if (__isset.min_genome_fraction && !(min_genome_fraction == rhs.min_genome_fraction))
      return false;
    if (__isset.rbp_param != rhs.__isset.rbp_param)
      return false;
    else if (__isset.rbp_param && !(rbp_param == rhs.rbp_param))
      return false;
    if (__isset.useNegativeCorrelation != rhs.__isset.useNegativeCorrelation)
      return false;
    else if (__isset.useNegativeCorrelation && !(useNegativeCorrelation == rhs.useNegativeCorrelation))
      return false;
    if (__isset.check_dataset_size != rhs.__isset.check_dataset_size)
      return false;
    else if (__isset.check_dataset_size && !(check_dataset_size == rhs.check_dataset_size))
      return false;
    if (__isset.use_gene_symbols != rhs.__isset.use_gene_symbols)
      return false;
    else if (__isset.use_gene_symbols && !(use_gene_symbols == rhs.use_gene_symbols))
      return false;
    return true;
  }
  bool operator != (const QueryParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryParams &a, QueryParams &b);

std::ostream& operator<<(std::ostream& out, const QueryParams& obj);

typedef struct _SeekQuery__isset {
  _SeekQuery__isset() : datasets(false), parameters(false), guideGenes(false), outputDir(true) {}
  bool datasets :1;
  bool parameters :1;
  bool guideGenes :1;
  bool outputDir :1;
} _SeekQuery__isset;

class SeekQuery : public virtual ::apache::thrift::TBase {
 public:

  SeekQuery(const SeekQuery&);
  SeekQuery& operator=(const SeekQuery&);
  SeekQuery() : species("Unknown"), outputDir("/tmp/seek") {
  }

  virtual ~SeekQuery() noexcept;
  std::string species;
  std::vector<std::string>  genes;
  std::vector<std::string>  datasets;
  QueryParams parameters;
  std::vector<std::string>  guideGenes;
  std::string outputDir;

  _SeekQuery__isset __isset;

  void __set_species(const std::string& val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_parameters(const QueryParams& val);

  void __set_guideGenes(const std::vector<std::string> & val);

  void __set_outputDir(const std::string& val);

  bool operator == (const SeekQuery & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (!(genes == rhs.genes))
      return false;
    if (__isset.datasets != rhs.__isset.datasets)
      return false;
    else if (__isset.datasets && !(datasets == rhs.datasets))
      return false;
    if (__isset.parameters != rhs.__isset.parameters)
      return false;
    else if (__isset.parameters && !(parameters == rhs.parameters))
      return false;
    if (__isset.guideGenes != rhs.__isset.guideGenes)
      return false;
    else if (__isset.guideGenes && !(guideGenes == rhs.guideGenes))
      return false;
    if (__isset.outputDir != rhs.__isset.outputDir)
      return false;
    else if (__isset.outputDir && !(outputDir == rhs.outputDir))
      return false;
    return true;
  }
  bool operator != (const SeekQuery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekQuery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekQuery &a, SeekQuery &b);

std::ostream& operator<<(std::ostream& out, const SeekQuery& obj);


class StringDoublePair : public virtual ::apache::thrift::TBase {
 public:

  StringDoublePair(const StringDoublePair&);
  StringDoublePair& operator=(const StringDoublePair&);
  StringDoublePair() : name(), value(0) {
  }

  virtual ~StringDoublePair() noexcept;
  std::string name;
  double value;

  void __set_name(const std::string& val);

  void __set_value(const double val);

  bool operator == (const StringDoublePair & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StringDoublePair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StringDoublePair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StringDoublePair &a, StringDoublePair &b);

std::ostream& operator<<(std::ostream& out, const StringDoublePair& obj);

typedef struct _QueryResult__isset {
  _QueryResult__isset() : dataset_weights(false), statusMsg(false) {}
  bool dataset_weights :1;
  bool statusMsg :1;
} _QueryResult__isset;

class QueryResult : public virtual ::apache::thrift::TBase {
 public:

  QueryResult(const QueryResult&);
  QueryResult& operator=(const QueryResult&);
  QueryResult() : success(0), statusMsg() {
  }

  virtual ~QueryResult() noexcept;
  bool success;
  std::vector<StringDoublePair>  gene_scores;
  std::vector<StringDoublePair>  dataset_weights;
  std::string statusMsg;

  _QueryResult__isset __isset;

  void __set_success(const bool val);

  void __set_gene_scores(const std::vector<StringDoublePair> & val);

  void __set_dataset_weights(const std::vector<StringDoublePair> & val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const QueryResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(gene_scores == rhs.gene_scores))
      return false;
    if (__isset.dataset_weights != rhs.__isset.dataset_weights)
      return false;
    else if (__isset.dataset_weights && !(dataset_weights == rhs.dataset_weights))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const QueryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResult &a, QueryResult &b);

std::ostream& operator<<(std::ostream& out, const QueryResult& obj);

} // namespace

#endif
