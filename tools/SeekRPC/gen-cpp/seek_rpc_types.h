/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef seek_rpc_TYPES_H
#define seek_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace SeekRPC {

struct SearchMethod {
  enum type {
    CV = 1,
    CVCustom = 2,
    EqualWeighting = 3,
    OrderStatistics = 4
  };
};

extern const std::map<int, const char*> _SearchMethod_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const SearchMethod::type& val);

std::string to_string(const SearchMethod::type& val);

struct DistanceMeasure {
  enum type {
    ZScore = 1,
    ZScoreHubbinessCorrected = 2,
    Correlation = 3
  };
};

extern const std::map<int, const char*> _DistanceMeasure_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DistanceMeasure::type& val);

std::string to_string(const DistanceMeasure::type& val);

struct QueryStatus {
  enum type {
    Complete = 1,
    Incomplete = 2,
    Error = 3
  };
};

extern const std::map<int, const char*> _QueryStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const QueryStatus::type& val);

std::string to_string(const QueryStatus::type& val);

class QueryParams;

class SeekQuery;

class StringDoublePair;

class QueryResult;

typedef struct _QueryParams__isset {
  _QueryParams__isset() : searchMethod(true), distanceMeasure(true), minQueryGenesFraction(true), minGenomeFraction(true), rbpParam(true), useNegativeCorrelation(true), checkDatasetSize(true), useGeneSymbols(true), simulateWeights(true) {}
  bool searchMethod :1;
  bool distanceMeasure :1;
  bool minQueryGenesFraction :1;
  bool minGenomeFraction :1;
  bool rbpParam :1;
  bool useNegativeCorrelation :1;
  bool checkDatasetSize :1;
  bool useGeneSymbols :1;
  bool simulateWeights :1;
} _QueryParams__isset;

class QueryParams : public virtual ::apache::thrift::TBase {
 public:

  QueryParams(const QueryParams&);
  QueryParams& operator=(const QueryParams&);
  QueryParams() : searchMethod((SearchMethod::type)1), distanceMeasure((DistanceMeasure::type)2), minQueryGenesFraction(0.0000000000000000), minGenomeFraction(0.0000000000000000), rbpParam(0.9900000000000000), useNegativeCorrelation(false), checkDatasetSize(false), useGeneSymbols(false), simulateWeights(false) {
    searchMethod = (SearchMethod::type)1;

    distanceMeasure = (DistanceMeasure::type)2;

  }

  virtual ~QueryParams() noexcept;
  /**
   * 
   * @see SearchMethod
   */
  SearchMethod::type searchMethod;
  /**
   * 
   * @see DistanceMeasure
   */
  DistanceMeasure::type distanceMeasure;
  double minQueryGenesFraction;
  double minGenomeFraction;
  double rbpParam;
  bool useNegativeCorrelation;
  bool checkDatasetSize;
  bool useGeneSymbols;
  bool simulateWeights;

  _QueryParams__isset __isset;

  void __set_searchMethod(const SearchMethod::type val);

  void __set_distanceMeasure(const DistanceMeasure::type val);

  void __set_minQueryGenesFraction(const double val);

  void __set_minGenomeFraction(const double val);

  void __set_rbpParam(const double val);

  void __set_useNegativeCorrelation(const bool val);

  void __set_checkDatasetSize(const bool val);

  void __set_useGeneSymbols(const bool val);

  void __set_simulateWeights(const bool val);

  bool operator == (const QueryParams & rhs) const
  {
    if (__isset.searchMethod != rhs.__isset.searchMethod)
      return false;
    else if (__isset.searchMethod && !(searchMethod == rhs.searchMethod))
      return false;
    if (__isset.distanceMeasure != rhs.__isset.distanceMeasure)
      return false;
    else if (__isset.distanceMeasure && !(distanceMeasure == rhs.distanceMeasure))
      return false;
    if (__isset.minQueryGenesFraction != rhs.__isset.minQueryGenesFraction)
      return false;
    else if (__isset.minQueryGenesFraction && !(minQueryGenesFraction == rhs.minQueryGenesFraction))
      return false;
    if (__isset.minGenomeFraction != rhs.__isset.minGenomeFraction)
      return false;
    else if (__isset.minGenomeFraction && !(minGenomeFraction == rhs.minGenomeFraction))
      return false;
    if (__isset.rbpParam != rhs.__isset.rbpParam)
      return false;
    else if (__isset.rbpParam && !(rbpParam == rhs.rbpParam))
      return false;
    if (__isset.useNegativeCorrelation != rhs.__isset.useNegativeCorrelation)
      return false;
    else if (__isset.useNegativeCorrelation && !(useNegativeCorrelation == rhs.useNegativeCorrelation))
      return false;
    if (__isset.checkDatasetSize != rhs.__isset.checkDatasetSize)
      return false;
    else if (__isset.checkDatasetSize && !(checkDatasetSize == rhs.checkDatasetSize))
      return false;
    if (__isset.useGeneSymbols != rhs.__isset.useGeneSymbols)
      return false;
    else if (__isset.useGeneSymbols && !(useGeneSymbols == rhs.useGeneSymbols))
      return false;
    if (__isset.simulateWeights != rhs.__isset.simulateWeights)
      return false;
    else if (__isset.simulateWeights && !(simulateWeights == rhs.simulateWeights))
      return false;
    return true;
  }
  bool operator != (const QueryParams &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryParams & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryParams &a, QueryParams &b);

std::ostream& operator<<(std::ostream& out, const QueryParams& obj);

typedef struct _SeekQuery__isset {
  _SeekQuery__isset() : datasets(false), parameters(false), guideGenes(false), outputDir(true) {}
  bool datasets :1;
  bool parameters :1;
  bool guideGenes :1;
  bool outputDir :1;
} _SeekQuery__isset;

class SeekQuery : public virtual ::apache::thrift::TBase {
 public:

  SeekQuery(const SeekQuery&);
  SeekQuery& operator=(const SeekQuery&);
  SeekQuery() : species("Unknown"), outputDir("/tmp/seek") {
  }

  virtual ~SeekQuery() noexcept;
  std::string species;
  std::vector<std::string>  genes;
  std::vector<std::string>  datasets;
  QueryParams parameters;
  std::vector<std::string>  guideGenes;
  std::string outputDir;

  _SeekQuery__isset __isset;

  void __set_species(const std::string& val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_parameters(const QueryParams& val);

  void __set_guideGenes(const std::vector<std::string> & val);

  void __set_outputDir(const std::string& val);

  bool operator == (const SeekQuery & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (!(genes == rhs.genes))
      return false;
    if (__isset.datasets != rhs.__isset.datasets)
      return false;
    else if (__isset.datasets && !(datasets == rhs.datasets))
      return false;
    if (__isset.parameters != rhs.__isset.parameters)
      return false;
    else if (__isset.parameters && !(parameters == rhs.parameters))
      return false;
    if (__isset.guideGenes != rhs.__isset.guideGenes)
      return false;
    else if (__isset.guideGenes && !(guideGenes == rhs.guideGenes))
      return false;
    if (__isset.outputDir != rhs.__isset.outputDir)
      return false;
    else if (__isset.outputDir && !(outputDir == rhs.outputDir))
      return false;
    return true;
  }
  bool operator != (const SeekQuery &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SeekQuery & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SeekQuery &a, SeekQuery &b);

std::ostream& operator<<(std::ostream& out, const SeekQuery& obj);


class StringDoublePair : public virtual ::apache::thrift::TBase {
 public:

  StringDoublePair(const StringDoublePair&);
  StringDoublePair& operator=(const StringDoublePair&);
  StringDoublePair() : name(), value(0) {
  }

  virtual ~StringDoublePair() noexcept;
  std::string name;
  double value;

  void __set_name(const std::string& val);

  void __set_value(const double val);

  bool operator == (const StringDoublePair & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StringDoublePair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StringDoublePair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(StringDoublePair &a, StringDoublePair &b);

std::ostream& operator<<(std::ostream& out, const StringDoublePair& obj);

typedef struct _QueryResult__isset {
  _QueryResult__isset() : datasetWeights(false), status(false), statusMsg(false) {}
  bool datasetWeights :1;
  bool status :1;
  bool statusMsg :1;
} _QueryResult__isset;

class QueryResult : public virtual ::apache::thrift::TBase {
 public:

  QueryResult(const QueryResult&);
  QueryResult& operator=(const QueryResult&);
  QueryResult() : success(0), status((QueryStatus::type)0), statusMsg() {
  }

  virtual ~QueryResult() noexcept;
  bool success;
  std::vector<StringDoublePair>  geneScores;
  std::vector<StringDoublePair>  datasetWeights;
  /**
   * 
   * @see QueryStatus
   */
  QueryStatus::type status;
  std::string statusMsg;

  _QueryResult__isset __isset;

  void __set_success(const bool val);

  void __set_geneScores(const std::vector<StringDoublePair> & val);

  void __set_datasetWeights(const std::vector<StringDoublePair> & val);

  void __set_status(const QueryStatus::type val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const QueryResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(geneScores == rhs.geneScores))
      return false;
    if (__isset.datasetWeights != rhs.__isset.datasetWeights)
      return false;
    else if (__isset.datasetWeights && !(datasetWeights == rhs.datasetWeights))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const QueryResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(QueryResult &a, QueryResult &b);

std::ostream& operator<<(std::ostream& out, const QueryResult& obj);

} // namespace

#endif
