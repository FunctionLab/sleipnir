#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class QueryStatus(object):
    Complete = 1
    Incomplete = 2
    Error = 3

    _VALUES_TO_NAMES = {
        1: "Complete",
        2: "Incomplete",
        3: "Error",
    }

    _NAMES_TO_VALUES = {
        "Complete": 1,
        "Incomplete": 2,
        "Error": 3,
    }


class SearchMethod(object):
    CV = 1
    CVCustom = 2
    EqualWeighting = 3
    OrderStatistics = 4

    _VALUES_TO_NAMES = {
        1: "CV",
        2: "CVCustom",
        3: "EqualWeighting",
        4: "OrderStatistics",
    }

    _NAMES_TO_VALUES = {
        "CV": 1,
        "CVCustom": 2,
        "EqualWeighting": 3,
        "OrderStatistics": 4,
    }


class DistanceMeasure(object):
    ZScore = 1
    ZScoreHubbinessCorrected = 2
    Correlation = 3

    _VALUES_TO_NAMES = {
        1: "ZScore",
        2: "ZScoreHubbinessCorrected",
        3: "Correlation",
    }

    _NAMES_TO_VALUES = {
        "ZScore": 1,
        "ZScoreHubbinessCorrected": 2,
        "Correlation": 3,
    }


class StringDoublePair(object):
    """
    Attributes:
     - name
     - value

    """


    def __init__(self, name=None, value=None,):
        self.name = name
        self.value = value

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.value = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StringDoublePair')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.DOUBLE, 2)
            oprot.writeDouble(self.value)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.name is None:
            raise TProtocolException(message='Required field name is unset!')
        if self.value is None:
            raise TProtocolException(message='Required field value is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SeekQueryParams(object):
    """
    Attributes:
     - searchMethod
     - distanceMeasure
     - minQueryGenesFraction
     - minGenomeFraction
     - rbpParam
     - useNegativeCorrelation
     - checkDatasetSize
     - useGeneSymbols
     - simulateWeights

    """


    def __init__(self, searchMethod=1, distanceMeasure=2, minQueryGenesFraction=0.0000000000000000, minGenomeFraction=0.0000000000000000, rbpParam=0.9900000000000000, useNegativeCorrelation=False, checkDatasetSize=False, useGeneSymbols=False, simulateWeights=False,):
        self.searchMethod = searchMethod
        self.distanceMeasure = distanceMeasure
        self.minQueryGenesFraction = minQueryGenesFraction
        self.minGenomeFraction = minGenomeFraction
        self.rbpParam = rbpParam
        self.useNegativeCorrelation = useNegativeCorrelation
        self.checkDatasetSize = checkDatasetSize
        self.useGeneSymbols = useGeneSymbols
        self.simulateWeights = simulateWeights

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.searchMethod = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.distanceMeasure = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.minQueryGenesFraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.minGenomeFraction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.rbpParam = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.useNegativeCorrelation = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.BOOL:
                    self.checkDatasetSize = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.BOOL:
                    self.useGeneSymbols = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.simulateWeights = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SeekQueryParams')
        if self.searchMethod is not None:
            oprot.writeFieldBegin('searchMethod', TType.I32, 1)
            oprot.writeI32(self.searchMethod)
            oprot.writeFieldEnd()
        if self.distanceMeasure is not None:
            oprot.writeFieldBegin('distanceMeasure', TType.I32, 2)
            oprot.writeI32(self.distanceMeasure)
            oprot.writeFieldEnd()
        if self.minQueryGenesFraction is not None:
            oprot.writeFieldBegin('minQueryGenesFraction', TType.DOUBLE, 3)
            oprot.writeDouble(self.minQueryGenesFraction)
            oprot.writeFieldEnd()
        if self.minGenomeFraction is not None:
            oprot.writeFieldBegin('minGenomeFraction', TType.DOUBLE, 4)
            oprot.writeDouble(self.minGenomeFraction)
            oprot.writeFieldEnd()
        if self.rbpParam is not None:
            oprot.writeFieldBegin('rbpParam', TType.DOUBLE, 5)
            oprot.writeDouble(self.rbpParam)
            oprot.writeFieldEnd()
        if self.useNegativeCorrelation is not None:
            oprot.writeFieldBegin('useNegativeCorrelation', TType.BOOL, 6)
            oprot.writeBool(self.useNegativeCorrelation)
            oprot.writeFieldEnd()
        if self.checkDatasetSize is not None:
            oprot.writeFieldBegin('checkDatasetSize', TType.BOOL, 7)
            oprot.writeBool(self.checkDatasetSize)
            oprot.writeFieldEnd()
        if self.useGeneSymbols is not None:
            oprot.writeFieldBegin('useGeneSymbols', TType.BOOL, 8)
            oprot.writeBool(self.useGeneSymbols)
            oprot.writeFieldEnd()
        if self.simulateWeights is not None:
            oprot.writeFieldBegin('simulateWeights', TType.BOOL, 9)
            oprot.writeBool(self.simulateWeights)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SeekQueryArgs(object):
    """
    Attributes:
     - species
     - genes
     - datasets
     - parameters
     - guideGenes
     - outputDir

    """


    def __init__(self, species="Unknown", genes=None, datasets=None, parameters=None, guideGenes=None, outputDir="",):
        self.species = species
        self.genes = genes
        self.datasets = datasets
        self.parameters = parameters
        self.guideGenes = guideGenes
        self.outputDir = outputDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.species = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.genes = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.genes.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.datasets = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.datasets.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.parameters = SeekQueryParams()
                    self.parameters.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.guideGenes = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.guideGenes.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.outputDir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SeekQueryArgs')
        if self.species is not None:
            oprot.writeFieldBegin('species', TType.STRING, 1)
            oprot.writeString(self.species.encode('utf-8') if sys.version_info[0] == 2 else self.species)
            oprot.writeFieldEnd()
        if self.genes is not None:
            oprot.writeFieldBegin('genes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.genes))
            for iter18 in self.genes:
                oprot.writeString(iter18.encode('utf-8') if sys.version_info[0] == 2 else iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.datasets is not None:
            oprot.writeFieldBegin('datasets', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.datasets))
            for iter19 in self.datasets:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.STRUCT, 4)
            self.parameters.write(oprot)
            oprot.writeFieldEnd()
        if self.guideGenes is not None:
            oprot.writeFieldBegin('guideGenes', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.guideGenes))
            for iter20 in self.guideGenes:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.outputDir is not None:
            oprot.writeFieldBegin('outputDir', TType.STRING, 6)
            oprot.writeString(self.outputDir.encode('utf-8') if sys.version_info[0] == 2 else self.outputDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.species is None:
            raise TProtocolException(message='Required field species is unset!')
        if self.genes is None:
            raise TProtocolException(message='Required field genes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class SeekResult(object):
    """
    Attributes:
     - success
     - geneScores
     - datasetWeights
     - status
     - statusMsg

    """


    def __init__(self, success=None, geneScores=None, datasetWeights=None, status=None, statusMsg=None,):
        self.success = success
        self.geneScores = geneScores
        self.datasetWeights = datasetWeights
        self.status = status
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.geneScores = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = StringDoublePair()
                        _elem26.read(iprot)
                        self.geneScores.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.datasetWeights = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = StringDoublePair()
                        _elem32.read(iprot)
                        self.datasetWeights.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('SeekResult')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.geneScores is not None:
            oprot.writeFieldBegin('geneScores', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.geneScores))
            for iter33 in self.geneScores:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.datasetWeights is not None:
            oprot.writeFieldBegin('datasetWeights', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.datasetWeights))
            for iter34 in self.datasetWeights:
                iter34.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 4)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 5)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        if self.geneScores is None:
            raise TProtocolException(message='Required field geneScores is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PclSettings(object):
    """
    Attributes:
     - outputNormalized
     - outputGeneExpression
     - outputQueryExpression
     - outputGeneCoexpression
     - outputQueryCoexpression
     - rbp

    """


    def __init__(self, outputNormalized=False, outputGeneExpression=False, outputQueryExpression=False, outputGeneCoexpression=False, outputQueryCoexpression=False, rbp=0.9900000000000000,):
        self.outputNormalized = outputNormalized
        self.outputGeneExpression = outputGeneExpression
        self.outputQueryExpression = outputQueryExpression
        self.outputGeneCoexpression = outputGeneCoexpression
        self.outputQueryCoexpression = outputQueryCoexpression
        self.rbp = rbp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.outputNormalized = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.outputGeneExpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.outputQueryExpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.outputGeneCoexpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.outputQueryCoexpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.rbp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclSettings')
        if self.outputNormalized is not None:
            oprot.writeFieldBegin('outputNormalized', TType.BOOL, 1)
            oprot.writeBool(self.outputNormalized)
            oprot.writeFieldEnd()
        if self.outputGeneExpression is not None:
            oprot.writeFieldBegin('outputGeneExpression', TType.BOOL, 2)
            oprot.writeBool(self.outputGeneExpression)
            oprot.writeFieldEnd()
        if self.outputQueryExpression is not None:
            oprot.writeFieldBegin('outputQueryExpression', TType.BOOL, 3)
            oprot.writeBool(self.outputQueryExpression)
            oprot.writeFieldEnd()
        if self.outputGeneCoexpression is not None:
            oprot.writeFieldBegin('outputGeneCoexpression', TType.BOOL, 4)
            oprot.writeBool(self.outputGeneCoexpression)
            oprot.writeFieldEnd()
        if self.outputQueryCoexpression is not None:
            oprot.writeFieldBegin('outputQueryCoexpression', TType.BOOL, 5)
            oprot.writeBool(self.outputQueryCoexpression)
            oprot.writeFieldEnd()
        if self.rbp is not None:
            oprot.writeFieldBegin('rbp', TType.DOUBLE, 6)
            oprot.writeDouble(self.rbp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PclQueryArgs(object):
    """
    Attributes:
     - species
     - datasets
     - genes
     - queryGenes
     - settings
     - outputDir

    """


    def __init__(self, species="Unknown", datasets=None, genes=None, queryGenes=None, settings=None, outputDir="/tmp/seek",):
        self.species = species
        self.datasets = datasets
        self.genes = genes
        self.queryGenes = queryGenes
        self.settings = settings
        self.outputDir = outputDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.species = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.datasets = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.datasets.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.genes = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.genes.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.queryGenes = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.queryGenes.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.settings = PclSettings()
                    self.settings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.outputDir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclQueryArgs')
        if self.species is not None:
            oprot.writeFieldBegin('species', TType.STRING, 1)
            oprot.writeString(self.species.encode('utf-8') if sys.version_info[0] == 2 else self.species)
            oprot.writeFieldEnd()
        if self.datasets is not None:
            oprot.writeFieldBegin('datasets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.datasets))
            for iter53 in self.datasets:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genes is not None:
            oprot.writeFieldBegin('genes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.genes))
            for iter54 in self.genes:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryGenes is not None:
            oprot.writeFieldBegin('queryGenes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.queryGenes))
            for iter55 in self.queryGenes:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.STRUCT, 5)
            self.settings.write(oprot)
            oprot.writeFieldEnd()
        if self.outputDir is not None:
            oprot.writeFieldBegin('outputDir', TType.STRING, 6)
            oprot.writeString(self.outputDir.encode('utf-8') if sys.version_info[0] == 2 else self.outputDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.species is None:
            raise TProtocolException(message='Required field species is unset!')
        if self.datasets is None:
            raise TProtocolException(message='Required field datasets is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PclResult(object):
    """
    Attributes:
     - success
     - datasetSizes
     - experimentNames
     - geneExpressions
     - geneCoexpressions
     - queryExpressions
     - queryCoexpressions
     - status
     - statusMsg

    """


    def __init__(self, success=None, datasetSizes=None, experimentNames=None, geneExpressions=None, geneCoexpressions=None, queryExpressions=None, queryCoexpressions=None, status=None, statusMsg=None,):
        self.success = success
        self.datasetSizes = datasetSizes
        self.experimentNames = experimentNames
        self.geneExpressions = geneExpressions
        self.geneCoexpressions = geneCoexpressions
        self.queryExpressions = queryExpressions
        self.queryCoexpressions = queryCoexpressions
        self.status = status
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.datasetSizes = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readI32()
                        self.datasetSizes.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.experimentNames = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.experimentNames.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.geneExpressions = []
                    (_etype71, _size68) = iprot.readListBegin()
                    for _i72 in range(_size68):
                        _elem73 = iprot.readDouble()
                        self.geneExpressions.append(_elem73)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.geneCoexpressions = []
                    (_etype77, _size74) = iprot.readListBegin()
                    for _i78 in range(_size74):
                        _elem79 = iprot.readDouble()
                        self.geneCoexpressions.append(_elem79)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.queryExpressions = []
                    (_etype83, _size80) = iprot.readListBegin()
                    for _i84 in range(_size80):
                        _elem85 = iprot.readDouble()
                        self.queryExpressions.append(_elem85)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.queryCoexpressions = []
                    (_etype89, _size86) = iprot.readListBegin()
                    for _i90 in range(_size86):
                        _elem91 = iprot.readDouble()
                        self.queryCoexpressions.append(_elem91)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclResult')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.datasetSizes is not None:
            oprot.writeFieldBegin('datasetSizes', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.datasetSizes))
            for iter92 in self.datasetSizes:
                oprot.writeI32(iter92)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentNames is not None:
            oprot.writeFieldBegin('experimentNames', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.experimentNames))
            for iter93 in self.experimentNames:
                oprot.writeString(iter93.encode('utf-8') if sys.version_info[0] == 2 else iter93)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneExpressions is not None:
            oprot.writeFieldBegin('geneExpressions', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.geneExpressions))
            for iter94 in self.geneExpressions:
                oprot.writeDouble(iter94)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneCoexpressions is not None:
            oprot.writeFieldBegin('geneCoexpressions', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.geneCoexpressions))
            for iter95 in self.geneCoexpressions:
                oprot.writeDouble(iter95)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryExpressions is not None:
            oprot.writeFieldBegin('queryExpressions', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.queryExpressions))
            for iter96 in self.queryExpressions:
                oprot.writeDouble(iter96)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryCoexpressions is not None:
            oprot.writeFieldBegin('queryCoexpressions', TType.LIST, 7)
            oprot.writeListBegin(TType.DOUBLE, len(self.queryCoexpressions))
            for iter97 in self.queryCoexpressions:
                oprot.writeDouble(iter97)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 8)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 9)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        if self.datasetSizes is None:
            raise TProtocolException(message='Required field datasetSizes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PValueGeneArgs(object):
    """
    Attributes:
     - species
     - genes
     - geneScores
     - geneRanks
     - useRank

    """


    def __init__(self, species="Unknown", genes=None, geneScores=None, geneRanks=None, useRank=False,):
        self.species = species
        self.genes = genes
        self.geneScores = geneScores
        self.geneRanks = geneRanks
        self.useRank = useRank

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.species = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.genes = []
                    (_etype101, _size98) = iprot.readListBegin()
                    for _i102 in range(_size98):
                        _elem103 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.genes.append(_elem103)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.geneScores = []
                    (_etype107, _size104) = iprot.readListBegin()
                    for _i108 in range(_size104):
                        _elem109 = iprot.readDouble()
                        self.geneScores.append(_elem109)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.geneRanks = []
                    (_etype113, _size110) = iprot.readListBegin()
                    for _i114 in range(_size110):
                        _elem115 = iprot.readI32()
                        self.geneRanks.append(_elem115)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.useRank = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PValueGeneArgs')
        if self.species is not None:
            oprot.writeFieldBegin('species', TType.STRING, 1)
            oprot.writeString(self.species.encode('utf-8') if sys.version_info[0] == 2 else self.species)
            oprot.writeFieldEnd()
        if self.genes is not None:
            oprot.writeFieldBegin('genes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.genes))
            for iter116 in self.genes:
                oprot.writeString(iter116.encode('utf-8') if sys.version_info[0] == 2 else iter116)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneScores is not None:
            oprot.writeFieldBegin('geneScores', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.geneScores))
            for iter117 in self.geneScores:
                oprot.writeDouble(iter117)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneRanks is not None:
            oprot.writeFieldBegin('geneRanks', TType.LIST, 4)
            oprot.writeListBegin(TType.I32, len(self.geneRanks))
            for iter118 in self.geneRanks:
                oprot.writeI32(iter118)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.useRank is not None:
            oprot.writeFieldBegin('useRank', TType.BOOL, 5)
            oprot.writeBool(self.useRank)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.species is None:
            raise TProtocolException(message='Required field species is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PValueDatasetArgs(object):
    """
    Attributes:
     - species
     - datasets
     - datasetWeights

    """


    def __init__(self, species="Unknown", datasets=None, datasetWeights=None,):
        self.species = species
        self.datasets = datasets
        self.datasetWeights = datasetWeights

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.species = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.datasets = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.datasets.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.datasetWeights = []
                    (_etype128, _size125) = iprot.readListBegin()
                    for _i129 in range(_size125):
                        _elem130 = iprot.readDouble()
                        self.datasetWeights.append(_elem130)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PValueDatasetArgs')
        if self.species is not None:
            oprot.writeFieldBegin('species', TType.STRING, 1)
            oprot.writeString(self.species.encode('utf-8') if sys.version_info[0] == 2 else self.species)
            oprot.writeFieldEnd()
        if self.datasets is not None:
            oprot.writeFieldBegin('datasets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.datasets))
            for iter131 in self.datasets:
                oprot.writeString(iter131.encode('utf-8') if sys.version_info[0] == 2 else iter131)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.datasetWeights is not None:
            oprot.writeFieldBegin('datasetWeights', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.datasetWeights))
            for iter132 in self.datasetWeights:
                oprot.writeDouble(iter132)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.species is None:
            raise TProtocolException(message='Required field species is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PValueResult(object):
    """
    Attributes:
     - success
     - pvalues
     - status
     - statusMsg

    """


    def __init__(self, success=None, pvalues=None, status=None, statusMsg=None,):
        self.success = success
        self.pvalues = pvalues
        self.status = status
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.pvalues = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = iprot.readDouble()
                        self.pvalues.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PValueResult')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.pvalues is not None:
            oprot.writeFieldBegin('pvalues', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.pvalues))
            for iter139 in self.pvalues:
                oprot.writeDouble(iter139)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 3)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 4)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(StringDoublePair)
StringDoublePair.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.DOUBLE, 'value', None, None, ),  # 2
)
all_structs.append(SeekQueryParams)
SeekQueryParams.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'searchMethod', None, 1, ),  # 1
    (2, TType.I32, 'distanceMeasure', None, 2, ),  # 2
    (3, TType.DOUBLE, 'minQueryGenesFraction', None, 0.0000000000000000, ),  # 3
    (4, TType.DOUBLE, 'minGenomeFraction', None, 0.0000000000000000, ),  # 4
    (5, TType.DOUBLE, 'rbpParam', None, 0.9900000000000000, ),  # 5
    (6, TType.BOOL, 'useNegativeCorrelation', None, False, ),  # 6
    (7, TType.BOOL, 'checkDatasetSize', None, False, ),  # 7
    (8, TType.BOOL, 'useGeneSymbols', None, False, ),  # 8
    (9, TType.BOOL, 'simulateWeights', None, False, ),  # 9
)
all_structs.append(SeekQueryArgs)
SeekQueryArgs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'species', 'UTF8', "Unknown", ),  # 1
    (2, TType.LIST, 'genes', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'datasets', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.STRUCT, 'parameters', [SeekQueryParams, None], None, ),  # 4
    (5, TType.LIST, 'guideGenes', (TType.STRING, 'UTF8', False), None, ),  # 5
    (6, TType.STRING, 'outputDir', 'UTF8', "", ),  # 6
)
all_structs.append(SeekResult)
SeekResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.LIST, 'geneScores', (TType.STRUCT, [StringDoublePair, None], False), None, ),  # 2
    (3, TType.LIST, 'datasetWeights', (TType.STRUCT, [StringDoublePair, None], False), None, ),  # 3
    (4, TType.I32, 'status', None, None, ),  # 4
    (5, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 5
)
all_structs.append(PclSettings)
PclSettings.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'outputNormalized', None, False, ),  # 1
    (2, TType.BOOL, 'outputGeneExpression', None, False, ),  # 2
    (3, TType.BOOL, 'outputQueryExpression', None, False, ),  # 3
    (4, TType.BOOL, 'outputGeneCoexpression', None, False, ),  # 4
    (5, TType.BOOL, 'outputQueryCoexpression', None, False, ),  # 5
    (6, TType.DOUBLE, 'rbp', None, 0.9900000000000000, ),  # 6
)
all_structs.append(PclQueryArgs)
PclQueryArgs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'species', 'UTF8', "Unknown", ),  # 1
    (2, TType.LIST, 'datasets', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'genes', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'queryGenes', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'settings', [PclSettings, None], None, ),  # 5
    (6, TType.STRING, 'outputDir', 'UTF8', "/tmp/seek", ),  # 6
)
all_structs.append(PclResult)
PclResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.LIST, 'datasetSizes', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'experimentNames', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'geneExpressions', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'geneCoexpressions', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'queryExpressions', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.LIST, 'queryCoexpressions', (TType.DOUBLE, None, False), None, ),  # 7
    (8, TType.I32, 'status', None, None, ),  # 8
    (9, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 9
)
all_structs.append(PValueGeneArgs)
PValueGeneArgs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'species', 'UTF8', "Unknown", ),  # 1
    (2, TType.LIST, 'genes', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'geneScores', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'geneRanks', (TType.I32, None, False), None, ),  # 4
    (5, TType.BOOL, 'useRank', None, False, ),  # 5
)
all_structs.append(PValueDatasetArgs)
PValueDatasetArgs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'species', 'UTF8', "Unknown", ),  # 1
    (2, TType.LIST, 'datasets', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'datasetWeights', (TType.DOUBLE, None, False), None, ),  # 3
)
all_structs.append(PValueResult)
PValueResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.LIST, 'pvalues', (TType.DOUBLE, None, False), None, ),  # 2
    (3, TType.I32, 'status', None, None, ),  # 3
    (4, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 4
)
fix_spec(all_structs)
del all_structs
