/* cmdline.h */

/* File autogenerated by gengetopt version 2.13.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "SVMer"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  char * input_arg;	/* Input answer DAT file.  */
  char * output_arg;	/* Output prediction DAT file.  */
  char * model_arg;	/* SVM model file.  */
  int pcl_flag;	/* PCL input mode (default=on).  */
  int genewise_flag;	/* Learn per-gene SVMs for pairwise predictions (default=off).  */
  int skip_arg;	/* Columns to skip in input PCLs (default='2').  */
  char * binary_arg;	/* Input binary training file.  */
  char * genes_arg;	/* Gene inclusion file.  */
  char * genex_arg;	/* Gene exclusion file.  */
  char * genet_arg;	/* Term inclusion file.  */
  char * genel_arg;	/* Gene skip file for per-gene SVMs.  */
  int random_arg;	/* Seed random generator (default='0').  */
  int verbosity_arg;	/* Message verbosity (default='5').  */
  char * kernel_arg;	/* SVM kernel function (default='linear').  */
  int cache_arg;	/* SVM cache size (default='40').  */
  float tradeoff_arg;	/* Classification tradeoff.  */
  float gamma_arg;	/* RBF gamma (default='1').  */
  int degree_arg;	/* Polynomial degree (default='3').  */
  char * alphas_arg;	/* SVM alphas file.  */
  int iterations_arg;	/* SVM iterations (default='100000').  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int output_given ;	/* Whether output was given.  */
  int model_given ;	/* Whether model was given.  */
  int pcl_given ;	/* Whether pcl was given.  */
  int genewise_given ;	/* Whether genewise was given.  */
  int skip_given ;	/* Whether skip was given.  */
  int binary_given ;	/* Whether binary was given.  */
  int genes_given ;	/* Whether genes was given.  */
  int genex_given ;	/* Whether genex was given.  */
  int genet_given ;	/* Whether genet was given.  */
  int genel_given ;	/* Whether genel was given.  */
  int random_given ;	/* Whether random was given.  */
  int verbosity_given ;	/* Whether verbosity was given.  */
  int kernel_given ;	/* Whether kernel was given.  */
  int cache_given ;	/* Whether cache was given.  */
  int tradeoff_given ;	/* Whether tradeoff was given.  */
  int gamma_given ;	/* Whether gamma was given.  */
  int degree_given ;	/* Whether degree was given.  */
  int alphas_given ;	/* Whether alphas was given.  */
  int iterations_given ;	/* Whether iterations was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);

extern char *kernel_values[] ;	/* Possible values for kernel.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
