/* cmdline.h */

/* File autogenerated by gengetopt version 2.13.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "BNUnraveler"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  char * input_arg;	/* Input (X)DSL file directory (default='.').  */
  char * answers_arg;	/* Answer file.  */
  int memmap_flag;	/* Memory map input files (default=off).  */
  int threads_arg;	/* Maximum number of threads to spawn (default='-1').  */
  int zero_flag;	/* Zero missing values (default=off).  */
  char * zeros_arg;	/* Read zeroed node IDs/outputs from the given file.  */
  int group_flag;	/* Group identical inputs (default=on).  */
  char * output_arg;	/* Output directory (default='.').  */
  char * directory_arg;	/* Data directory (default='.').  */
  int verbosity_arg;	/* Message verbosity (default='5').  */
  char * genes_arg;	/* Gene inclusion file.  */
  char * genome_arg;	/* Gene list of interest.  */
  int xdsl_flag;	/* Assume XDSL input rather than DSL (default=on).  */
  int everything_flag;	/* Evaluate non-term pairs (default=off).  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int answers_given ;	/* Whether answers was given.  */
  int memmap_given ;	/* Whether memmap was given.  */
  int threads_given ;	/* Whether threads was given.  */
  int zero_given ;	/* Whether zero was given.  */
  int zeros_given ;	/* Whether zeros was given.  */
  int group_given ;	/* Whether group was given.  */
  int output_given ;	/* Whether output was given.  */
  int directory_given ;	/* Whether directory was given.  */
  int verbosity_given ;	/* Whether verbosity was given.  */
  int genes_given ;	/* Whether genes was given.  */
  int genome_given ;	/* Whether genome was given.  */
  int xdsl_given ;	/* Whether xdsl was given.  */
  int everything_given ;	/* Whether everything was given.  */

  char **inputs ; /* unamed options */
  unsigned inputs_num ; /* unamed options number */
} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
