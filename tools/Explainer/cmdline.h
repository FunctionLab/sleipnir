/* cmdline.h */

/* File autogenerated by gengetopt version 2.13.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "Explainer"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  char * input_arg;	/* Correlation file.  */
  char * answers_arg;	/* Answer file.  */
  int invert_flag;	/* Invert correlations to distances (default=off).  */
  char * genes_arg;	/* Gene inclusion file.  */
  char * genex_arg;	/* Gene exclusion file.  */
  char * genet_arg;	/* Term inclusion file.  */
  int count_arg;	/* Number of pairs to display (default='-1').  */
  int normalize_flag;	/* Normalize to the range [0,1] (default=off).  */
  int positives_flag;	/* Include only positive pairs (default=off).  */
  char * features_arg;	/* SGD gene features.  */
  int everything_flag;	/* Include pairs without answers (default=off).  */
  int reverse_flag;	/* Reverse sort order (default=off).  */
  char * go_onto_arg;	/* GO ontology.  */
  char * go_anno_arg;	/* GO annotations.  */
  char * unknowns_arg;	/* Treatment of unknown genes (default='exclude').  */
  int verbosity_arg;	/* Message verbosity (default='5').  */
  int memmap_flag;	/* Memory map input files (default=off).  */
  double fraction_arg;	/* Random fraction of results to calculate (default='1').  */
  char * config_arg;	/* Command line config file (default='Explainer.ini').  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int input_given ;	/* Whether input was given.  */
  int answers_given ;	/* Whether answers was given.  */
  int invert_given ;	/* Whether invert was given.  */
  int genes_given ;	/* Whether genes was given.  */
  int genex_given ;	/* Whether genex was given.  */
  int genet_given ;	/* Whether genet was given.  */
  int count_given ;	/* Whether count was given.  */
  int normalize_given ;	/* Whether normalize was given.  */
  int positives_given ;	/* Whether positives was given.  */
  int features_given ;	/* Whether features was given.  */
  int everything_given ;	/* Whether everything was given.  */
  int reverse_given ;	/* Whether reverse was given.  */
  int go_onto_given ;	/* Whether go_onto was given.  */
  int go_anno_given ;	/* Whether go_anno was given.  */
  int unknowns_given ;	/* Whether unknowns was given.  */
  int verbosity_given ;	/* Whether verbosity was given.  */
  int memmap_given ;	/* Whether memmap was given.  */
  int fraction_given ;	/* Whether fraction was given.  */
  int config_given ;	/* Whether config was given.  */

} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_configfile (char * const filename, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);

extern char *unknowns_values[] ;	/* Possible values for unknowns.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
