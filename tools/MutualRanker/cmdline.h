/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name */
#define CMDLINE_PARSER_PACKAGE "MutualRanker"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * input_arg;	/**< @brief Input gene map (default='NA').  */
  char * input_orig;	/**< @brief Input gene map original value given at command line.  */
  const char *input_help; /**< @brief Input gene map help description.  */
  int convert_rank_flag;	/**< @brief Convert to rank (default=off).  */
  const char *convert_rank_help; /**< @brief Convert to rank help description.  */
  int output_component_flag;	/**< @brief Output component weighting, gene score. Creates *.gscore_comp. Used with Query mode (default=off).  */
  const char *output_component_help; /**< @brief Output component weighting, gene score. Creates *.gscore_comp. Used with Query mode help description.  */
  int merge_component_flag;	/**< @brief Merge component (generated from *.gscore_comp) (default=off).  */
  const char *merge_component_help; /**< @brief Merge component (generated from *.gscore_comp) help description.  */
  char * merge_gscore_list_arg;	/**< @brief Merge gscore list (for merge), contains a list of .gscore_comp files with path (default='NA').  */
  char * merge_gscore_list_orig;	/**< @brief Merge gscore list (for merge), contains a list of .gscore_comp files with path original value given at command line.  */
  const char *merge_gscore_list_help; /**< @brief Merge gscore list (for merge), contains a list of .gscore_comp files with path help description.  */
  char * input_file_arg;	/**< @brief Input DAB file (for convert) (default='NA').  */
  char * input_file_orig;	/**< @brief Input DAB file (for convert) original value given at command line.  */
  const char *input_file_help; /**< @brief Input DAB file (for convert) help description.  */
  char * output_rank_file_arg;	/**< @brief Output DAB with rank information (for convert) (default='NA').  */
  char * output_rank_file_orig;	/**< @brief Output DAB with rank information (for convert) original value given at command line.  */
  const char *output_rank_file_help; /**< @brief Output DAB with rank information (for convert) help description.  */
  char * query_arg;	/**< @brief Query file (default='NA').  */
  char * query_orig;	/**< @brief Query file original value given at command line.  */
  const char *query_help; /**< @brief Query file help description.  */
  char * tdab_list_arg;	/**< @brief Dab list (input) (default='NA').  */
  char * tdab_list_orig;	/**< @brief Dab list (input) original value given at command line.  */
  const char *tdab_list_help; /**< @brief Dab list (input) help description.  */
  char * dab_dir_arg;	/**< @brief Dab directory (input).  */
  char * dab_dir_orig;	/**< @brief Dab directory (input) original value given at command line.  */
  const char *dab_dir_help; /**< @brief Dab directory (input) help description.  */
  float threshold_q_arg;	/**< @brief Fraction of query genes need to be present in a dataset (default='0').  */
  char * threshold_q_orig;	/**< @brief Fraction of query genes need to be present in a dataset original value given at command line.  */
  const char *threshold_q_help; /**< @brief Fraction of query genes need to be present in a dataset help description.  */
  float threshold_g_arg;	/**< @brief Fraction of datasets that must contain a gene to put it in ranking (important if individual datasets have very different gene coverage, and for datasets with small gene-size) (default='0.50').  */
  char * threshold_g_orig;	/**< @brief Fraction of datasets that must contain a gene to put it in ranking (important if individual datasets have very different gene coverage, and for datasets with small gene-size) original value given at command line.  */
  const char *threshold_g_help; /**< @brief Fraction of datasets that must contain a gene to put it in ranking (important if individual datasets have very different gene coverage, and for datasets with small gene-size) help description.  */
  char * search_mode_arg;	/**< @brief Search mode: equal weighted (eq) or CV LOI (cv_loi). (default='NA').  */
  char * search_mode_orig;	/**< @brief Search mode: equal weighted (eq) or CV LOI (cv_loi). original value given at command line.  */
  const char *search_mode_help; /**< @brief Search mode: equal weighted (eq) or CV LOI (cv_loi). help description.  */
  char * dir_out_arg;	/**< @brief Output directory.  */
  char * dir_out_orig;	/**< @brief Output directory original value given at command line.  */
  const char *dir_out_help; /**< @brief Output directory help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int input_given ;	/**< @brief Whether input was given.  */
  unsigned int convert_rank_given ;	/**< @brief Whether convert_rank was given.  */
  unsigned int output_component_given ;	/**< @brief Whether output_component was given.  */
  unsigned int merge_component_given ;	/**< @brief Whether merge_component was given.  */
  unsigned int merge_gscore_list_given ;	/**< @brief Whether merge_gscore_list was given.  */
  unsigned int input_file_given ;	/**< @brief Whether input_file was given.  */
  unsigned int output_rank_file_given ;	/**< @brief Whether output_rank_file was given.  */
  unsigned int query_given ;	/**< @brief Whether query was given.  */
  unsigned int tdab_list_given ;	/**< @brief Whether tdab_list was given.  */
  unsigned int dab_dir_given ;	/**< @brief Whether dab_dir was given.  */
  unsigned int threshold_q_given ;	/**< @brief Whether threshold_q was given.  */
  unsigned int threshold_g_given ;	/**< @brief Whether threshold_g was given.  */
  unsigned int search_mode_given ;	/**< @brief Whether search_mode was given.  */
  unsigned int dir_out_given ;	/**< @brief Whether dir_out was given.  */

  char **inputs ; /**< @brief unamed options (options without names) */
  unsigned inputs_num ; /**< @brief unamed options number */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);

extern char *cmdline_parser_search_mode_values[] ;	/**< @brief Possible values for search_mode.  */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
