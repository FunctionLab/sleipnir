/* cmdline.h */

/* File autogenerated by gengetopt version 2.13.1  */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
#define CMDLINE_PARSER_PACKAGE "BNConverter"
#endif

#ifndef CMDLINE_PARSER_VERSION
#define CMDLINE_PARSER_VERSION "1.0"
#endif

struct gengetopt_args_info
{
  char * datadir_arg;	/* Data directory.  */
  char * dataset_arg;	/* Dataset dad file.  */
  char * input_arg;	/* Input dsl file.  */
  char * output_arg;	/* Output xml file.  */
  char * answers_arg;	/* Answer file.  */
  int pnl_flag;	/* Use PNL library (default=off).  */
  int function_flag;	/* Use function-fitting networks (default=off).  */
  int random_arg;	/* Seed random generator (default='0').  */
  int randomize_flag;	/* Randomize CPTs before training (default=off).  */
  double test_arg;	/* Test fraction (default='0').  */
  int iterations_arg;	/* EM iterations (default='20').  */
  char * genes_arg;	/* Gene inclusion file.  */
  char * genex_arg;	/* Gene exclusion file.  */
  char * genet_arg;	/* Term inclusion file.  */
  int verbosity_arg;	/* Message verbosity (default='5').  */
  int checkpoint_flag;	/* Checkpoint xml file after each iteration (default=off).  */
  char * eval_train_arg;	/* Training evaluation results.  */
  char * eval_test_arg;	/* Test evaluation results.  */
  int zero_flag;	/* Zero missing values (default=off).  */
  int group_flag;	/* Group identical inputs (default=on).  */
  int murder_arg;	/* Kill the specified CPT before evaluation.  */
  int elr_flag;	/* Use ELR algorithm for learning (default=off).  */
  char * default_arg;	/* Bayes net containing defaults for cases with missing data.  */
  
  int help_given ;	/* Whether help was given.  */
  int version_given ;	/* Whether version was given.  */
  int datadir_given ;	/* Whether datadir was given.  */
  int dataset_given ;	/* Whether dataset was given.  */
  int input_given ;	/* Whether input was given.  */
  int output_given ;	/* Whether output was given.  */
  int answers_given ;	/* Whether answers was given.  */
  int pnl_given ;	/* Whether pnl was given.  */
  int function_given ;	/* Whether function was given.  */
  int random_given ;	/* Whether random was given.  */
  int randomize_given ;	/* Whether randomize was given.  */
  int test_given ;	/* Whether test was given.  */
  int iterations_given ;	/* Whether iterations was given.  */
  int genes_given ;	/* Whether genes was given.  */
  int genex_given ;	/* Whether genex was given.  */
  int genet_given ;	/* Whether genet was given.  */
  int verbosity_given ;	/* Whether verbosity was given.  */
  int checkpoint_given ;	/* Whether checkpoint was given.  */
  int eval_train_given ;	/* Whether eval_train was given.  */
  int eval_test_given ;	/* Whether eval_test was given.  */
  int zero_given ;	/* Whether zero was given.  */
  int group_given ;	/* Whether group was given.  */
  int murder_given ;	/* Whether murder was given.  */
  int elr_given ;	/* Whether elr was given.  */
  int default_given ;	/* Whether default was given.  */

  int data_group_counter; /* counter for group data */
} ;

int cmdline_parser (int argc, char * const *argv, struct gengetopt_args_info *args_info);
int cmdline_parser2 (int argc, char * const *argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required);

void cmdline_parser_print_help(void);
void cmdline_parser_print_version(void);

void cmdline_parser_init (struct gengetopt_args_info *args_info);
void cmdline_parser_free (struct gengetopt_args_info *args_info);

int cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
