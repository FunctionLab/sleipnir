/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "pcl_rpc_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace PclRPC {

int _kPclStatusValues[] = {
  PclStatus::Complete,
  PclStatus::Incomplete,
  PclStatus::Error
};
const char* _kPclStatusNames[] = {
  "Complete",
  "Incomplete",
  "Error"
};
const std::map<int, const char*> _PclStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kPclStatusValues, _kPclStatusNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const PclStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _PclStatus_VALUES_TO_NAMES.find(val);
  if (it != _PclStatus_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const PclStatus::type& val) {
  std::map<int, const char*>::const_iterator it = _PclStatus_VALUES_TO_NAMES.find(val);
  if (it != _PclStatus_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


PclSettings::~PclSettings() noexcept {
}


void PclSettings::__set_outputNormalized(const bool val) {
  this->outputNormalized = val;
__isset.outputNormalized = true;
}

void PclSettings::__set_outputGeneExpression(const bool val) {
  this->outputGeneExpression = val;
__isset.outputGeneExpression = true;
}

void PclSettings::__set_outputQueryExpression(const bool val) {
  this->outputQueryExpression = val;
__isset.outputQueryExpression = true;
}

void PclSettings::__set_outputGeneCoexpression(const bool val) {
  this->outputGeneCoexpression = val;
__isset.outputGeneCoexpression = true;
}

void PclSettings::__set_outputQueryCoexpression(const bool val) {
  this->outputQueryCoexpression = val;
__isset.outputQueryCoexpression = true;
}

void PclSettings::__set_rbp(const double val) {
  this->rbp = val;
__isset.rbp = true;
}
std::ostream& operator<<(std::ostream& out, const PclSettings& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclSettings::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputNormalized);
          this->__isset.outputNormalized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputGeneExpression);
          this->__isset.outputGeneExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputQueryExpression);
          this->__isset.outputQueryExpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputGeneCoexpression);
          this->__isset.outputGeneCoexpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->outputQueryCoexpression);
          this->__isset.outputQueryCoexpression = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rbp);
          this->__isset.rbp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PclSettings::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclSettings");

  if (this->__isset.outputNormalized) {
    xfer += oprot->writeFieldBegin("outputNormalized", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->outputNormalized);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputGeneExpression) {
    xfer += oprot->writeFieldBegin("outputGeneExpression", ::apache::thrift::protocol::T_BOOL, 2);
    xfer += oprot->writeBool(this->outputGeneExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputQueryExpression) {
    xfer += oprot->writeFieldBegin("outputQueryExpression", ::apache::thrift::protocol::T_BOOL, 3);
    xfer += oprot->writeBool(this->outputQueryExpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputGeneCoexpression) {
    xfer += oprot->writeFieldBegin("outputGeneCoexpression", ::apache::thrift::protocol::T_BOOL, 4);
    xfer += oprot->writeBool(this->outputGeneCoexpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputQueryCoexpression) {
    xfer += oprot->writeFieldBegin("outputQueryCoexpression", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->outputQueryCoexpression);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.rbp) {
    xfer += oprot->writeFieldBegin("rbp", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->rbp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclSettings &a, PclSettings &b) {
  using ::std::swap;
  swap(a.outputNormalized, b.outputNormalized);
  swap(a.outputGeneExpression, b.outputGeneExpression);
  swap(a.outputQueryExpression, b.outputQueryExpression);
  swap(a.outputGeneCoexpression, b.outputGeneCoexpression);
  swap(a.outputQueryCoexpression, b.outputQueryCoexpression);
  swap(a.rbp, b.rbp);
  swap(a.__isset, b.__isset);
}

PclSettings::PclSettings(const PclSettings& other0) {
  outputNormalized = other0.outputNormalized;
  outputGeneExpression = other0.outputGeneExpression;
  outputQueryExpression = other0.outputQueryExpression;
  outputGeneCoexpression = other0.outputGeneCoexpression;
  outputQueryCoexpression = other0.outputQueryCoexpression;
  rbp = other0.rbp;
  __isset = other0.__isset;
}
PclSettings& PclSettings::operator=(const PclSettings& other1) {
  outputNormalized = other1.outputNormalized;
  outputGeneExpression = other1.outputGeneExpression;
  outputQueryExpression = other1.outputQueryExpression;
  outputGeneCoexpression = other1.outputGeneCoexpression;
  outputQueryCoexpression = other1.outputQueryCoexpression;
  rbp = other1.rbp;
  __isset = other1.__isset;
  return *this;
}
void PclSettings::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclSettings(";
  out << "outputNormalized="; (__isset.outputNormalized ? (out << to_string(outputNormalized)) : (out << "<null>"));
  out << ", " << "outputGeneExpression="; (__isset.outputGeneExpression ? (out << to_string(outputGeneExpression)) : (out << "<null>"));
  out << ", " << "outputQueryExpression="; (__isset.outputQueryExpression ? (out << to_string(outputQueryExpression)) : (out << "<null>"));
  out << ", " << "outputGeneCoexpression="; (__isset.outputGeneCoexpression ? (out << to_string(outputGeneCoexpression)) : (out << "<null>"));
  out << ", " << "outputQueryCoexpression="; (__isset.outputQueryCoexpression ? (out << to_string(outputQueryCoexpression)) : (out << "<null>"));
  out << ", " << "rbp="; (__isset.rbp ? (out << to_string(rbp)) : (out << "<null>"));
  out << ")";
}


PclQueryArgs::~PclQueryArgs() noexcept {
}


void PclQueryArgs::__set_species(const std::string& val) {
  this->species = val;
}

void PclQueryArgs::__set_datasets(const std::vector<std::string> & val) {
  this->datasets = val;
}

void PclQueryArgs::__set_genes(const std::vector<std::string> & val) {
  this->genes = val;
__isset.genes = true;
}

void PclQueryArgs::__set_queryGenes(const std::vector<std::string> & val) {
  this->queryGenes = val;
__isset.queryGenes = true;
}

void PclQueryArgs::__set_settings(const PclSettings& val) {
  this->settings = val;
__isset.settings = true;
}

void PclQueryArgs::__set_outputDir(const std::string& val) {
  this->outputDir = val;
__isset.outputDir = true;
}
std::ostream& operator<<(std::ostream& out, const PclQueryArgs& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclQueryArgs::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_species = false;
  bool isset_datasets = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->species);
          isset_species = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasets.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->datasets.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->datasets[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->genes.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->genes.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readString(this->genes[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.genes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryGenes.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->queryGenes.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->queryGenes[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryGenes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->settings.read(iprot);
          this->__isset.settings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->outputDir);
          this->__isset.outputDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_species)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasets)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PclQueryArgs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclQueryArgs");

  xfer += oprot->writeFieldBegin("species", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->species);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasets", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->datasets.size()));
    std::vector<std::string> ::const_iterator _iter17;
    for (_iter17 = this->datasets.begin(); _iter17 != this->datasets.end(); ++_iter17)
    {
      xfer += oprot->writeString((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.genes) {
    xfer += oprot->writeFieldBegin("genes", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->genes.size()));
      std::vector<std::string> ::const_iterator _iter18;
      for (_iter18 = this->genes.begin(); _iter18 != this->genes.end(); ++_iter18)
      {
        xfer += oprot->writeString((*_iter18));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryGenes) {
    xfer += oprot->writeFieldBegin("queryGenes", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->queryGenes.size()));
      std::vector<std::string> ::const_iterator _iter19;
      for (_iter19 = this->queryGenes.begin(); _iter19 != this->queryGenes.end(); ++_iter19)
      {
        xfer += oprot->writeString((*_iter19));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.settings) {
    xfer += oprot->writeFieldBegin("settings", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->settings.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.outputDir) {
    xfer += oprot->writeFieldBegin("outputDir", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->outputDir);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclQueryArgs &a, PclQueryArgs &b) {
  using ::std::swap;
  swap(a.species, b.species);
  swap(a.datasets, b.datasets);
  swap(a.genes, b.genes);
  swap(a.queryGenes, b.queryGenes);
  swap(a.settings, b.settings);
  swap(a.outputDir, b.outputDir);
  swap(a.__isset, b.__isset);
}

PclQueryArgs::PclQueryArgs(const PclQueryArgs& other20) {
  species = other20.species;
  datasets = other20.datasets;
  genes = other20.genes;
  queryGenes = other20.queryGenes;
  settings = other20.settings;
  outputDir = other20.outputDir;
  __isset = other20.__isset;
}
PclQueryArgs& PclQueryArgs::operator=(const PclQueryArgs& other21) {
  species = other21.species;
  datasets = other21.datasets;
  genes = other21.genes;
  queryGenes = other21.queryGenes;
  settings = other21.settings;
  outputDir = other21.outputDir;
  __isset = other21.__isset;
  return *this;
}
void PclQueryArgs::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclQueryArgs(";
  out << "species=" << to_string(species);
  out << ", " << "datasets=" << to_string(datasets);
  out << ", " << "genes="; (__isset.genes ? (out << to_string(genes)) : (out << "<null>"));
  out << ", " << "queryGenes="; (__isset.queryGenes ? (out << to_string(queryGenes)) : (out << "<null>"));
  out << ", " << "settings="; (__isset.settings ? (out << to_string(settings)) : (out << "<null>"));
  out << ", " << "outputDir="; (__isset.outputDir ? (out << to_string(outputDir)) : (out << "<null>"));
  out << ")";
}


PclResult::~PclResult() noexcept {
}


void PclResult::__set_success(const bool val) {
  this->success = val;
}

void PclResult::__set_datasetSizes(const std::vector<int32_t> & val) {
  this->datasetSizes = val;
}

void PclResult::__set_geneExpressions(const std::vector<double> & val) {
  this->geneExpressions = val;
__isset.geneExpressions = true;
}

void PclResult::__set_geneCoexpressions(const std::vector<double> & val) {
  this->geneCoexpressions = val;
__isset.geneCoexpressions = true;
}

void PclResult::__set_queryExpressions(const std::vector<double> & val) {
  this->queryExpressions = val;
__isset.queryExpressions = true;
}

void PclResult::__set_queryCoexpressions(const std::vector<double> & val) {
  this->queryCoexpressions = val;
__isset.queryCoexpressions = true;
}

void PclResult::__set_status(const PclStatus::type val) {
  this->status = val;
__isset.status = true;
}

void PclResult::__set_statusMsg(const std::string& val) {
  this->statusMsg = val;
__isset.statusMsg = true;
}
std::ostream& operator<<(std::ostream& out, const PclResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t PclResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_success = false;
  bool isset_datasetSizes = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->success);
          isset_success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->datasetSizes.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->datasetSizes.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readI32(this->datasetSizes[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          isset_datasetSizes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneExpressions.clear();
            uint32_t _size27;
            ::apache::thrift::protocol::TType _etype30;
            xfer += iprot->readListBegin(_etype30, _size27);
            this->geneExpressions.resize(_size27);
            uint32_t _i31;
            for (_i31 = 0; _i31 < _size27; ++_i31)
            {
              xfer += iprot->readDouble(this->geneExpressions[_i31]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.geneExpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->geneCoexpressions.clear();
            uint32_t _size32;
            ::apache::thrift::protocol::TType _etype35;
            xfer += iprot->readListBegin(_etype35, _size32);
            this->geneCoexpressions.resize(_size32);
            uint32_t _i36;
            for (_i36 = 0; _i36 < _size32; ++_i36)
            {
              xfer += iprot->readDouble(this->geneCoexpressions[_i36]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.geneCoexpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryExpressions.clear();
            uint32_t _size37;
            ::apache::thrift::protocol::TType _etype40;
            xfer += iprot->readListBegin(_etype40, _size37);
            this->queryExpressions.resize(_size37);
            uint32_t _i41;
            for (_i41 = 0; _i41 < _size37; ++_i41)
            {
              xfer += iprot->readDouble(this->queryExpressions[_i41]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryExpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->queryCoexpressions.clear();
            uint32_t _size42;
            ::apache::thrift::protocol::TType _etype45;
            xfer += iprot->readListBegin(_etype45, _size42);
            this->queryCoexpressions.resize(_size42);
            uint32_t _i46;
            for (_i46 = 0; _i46 < _size42; ++_i46)
            {
              xfer += iprot->readDouble(this->queryCoexpressions[_i46]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.queryCoexpressions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast47;
          xfer += iprot->readI32(ecast47);
          this->status = (PclStatus::type)ecast47;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusMsg);
          this->__isset.statusMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_success)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_datasetSizes)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t PclResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PclResult");

  xfer += oprot->writeFieldBegin("success", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->success);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("datasetSizes", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->datasetSizes.size()));
    std::vector<int32_t> ::const_iterator _iter48;
    for (_iter48 = this->datasetSizes.begin(); _iter48 != this->datasetSizes.end(); ++_iter48)
    {
      xfer += oprot->writeI32((*_iter48));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  if (this->__isset.geneExpressions) {
    xfer += oprot->writeFieldBegin("geneExpressions", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->geneExpressions.size()));
      std::vector<double> ::const_iterator _iter49;
      for (_iter49 = this->geneExpressions.begin(); _iter49 != this->geneExpressions.end(); ++_iter49)
      {
        xfer += oprot->writeDouble((*_iter49));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.geneCoexpressions) {
    xfer += oprot->writeFieldBegin("geneCoexpressions", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->geneCoexpressions.size()));
      std::vector<double> ::const_iterator _iter50;
      for (_iter50 = this->geneCoexpressions.begin(); _iter50 != this->geneCoexpressions.end(); ++_iter50)
      {
        xfer += oprot->writeDouble((*_iter50));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryExpressions) {
    xfer += oprot->writeFieldBegin("queryExpressions", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->queryExpressions.size()));
      std::vector<double> ::const_iterator _iter51;
      for (_iter51 = this->queryExpressions.begin(); _iter51 != this->queryExpressions.end(); ++_iter51)
      {
        xfer += oprot->writeDouble((*_iter51));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.queryCoexpressions) {
    xfer += oprot->writeFieldBegin("queryCoexpressions", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->queryCoexpressions.size()));
      std::vector<double> ::const_iterator _iter52;
      for (_iter52 = this->queryCoexpressions.begin(); _iter52 != this->queryCoexpressions.end(); ++_iter52)
      {
        xfer += oprot->writeDouble((*_iter52));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.statusMsg) {
    xfer += oprot->writeFieldBegin("statusMsg", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->statusMsg);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PclResult &a, PclResult &b) {
  using ::std::swap;
  swap(a.success, b.success);
  swap(a.datasetSizes, b.datasetSizes);
  swap(a.geneExpressions, b.geneExpressions);
  swap(a.geneCoexpressions, b.geneCoexpressions);
  swap(a.queryExpressions, b.queryExpressions);
  swap(a.queryCoexpressions, b.queryCoexpressions);
  swap(a.status, b.status);
  swap(a.statusMsg, b.statusMsg);
  swap(a.__isset, b.__isset);
}

PclResult::PclResult(const PclResult& other53) {
  success = other53.success;
  datasetSizes = other53.datasetSizes;
  geneExpressions = other53.geneExpressions;
  geneCoexpressions = other53.geneCoexpressions;
  queryExpressions = other53.queryExpressions;
  queryCoexpressions = other53.queryCoexpressions;
  status = other53.status;
  statusMsg = other53.statusMsg;
  __isset = other53.__isset;
}
PclResult& PclResult::operator=(const PclResult& other54) {
  success = other54.success;
  datasetSizes = other54.datasetSizes;
  geneExpressions = other54.geneExpressions;
  geneCoexpressions = other54.geneCoexpressions;
  queryExpressions = other54.queryExpressions;
  queryCoexpressions = other54.queryCoexpressions;
  status = other54.status;
  statusMsg = other54.statusMsg;
  __isset = other54.__isset;
  return *this;
}
void PclResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PclResult(";
  out << "success=" << to_string(success);
  out << ", " << "datasetSizes=" << to_string(datasetSizes);
  out << ", " << "geneExpressions="; (__isset.geneExpressions ? (out << to_string(geneExpressions)) : (out << "<null>"));
  out << ", " << "geneCoexpressions="; (__isset.geneCoexpressions ? (out << to_string(geneCoexpressions)) : (out << "<null>"));
  out << ", " << "queryExpressions="; (__isset.queryExpressions ? (out << to_string(queryExpressions)) : (out << "<null>"));
  out << ", " << "queryCoexpressions="; (__isset.queryCoexpressions ? (out << to_string(queryCoexpressions)) : (out << "<null>"));
  out << ", " << "status="; (__isset.status ? (out << to_string(status)) : (out << "<null>"));
  out << ", " << "statusMsg="; (__isset.statusMsg ? (out << to_string(statusMsg)) : (out << "<null>"));
  out << ")";
}

} // namespace
