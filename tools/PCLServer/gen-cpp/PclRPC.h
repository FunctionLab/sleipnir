/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PclRPC_H
#define PclRPC_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "pcl_rpc_types.h"

namespace PclRPC {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class PclRPCIf {
 public:
  virtual ~PclRPCIf() {}
  virtual void pclQuery(PclResult& _return, const PclQueryArgs& query) = 0;
  virtual int64_t pclQueryAsync(const PclQueryArgs& query) = 0;
  virtual void getQueryResult(PclResult& _return, const int64_t taskId, const bool block) = 0;
  virtual bool isQueryComplete(const int64_t taskId) = 0;
  virtual int32_t getRpcVersion() = 0;
  virtual int32_t ping() = 0;
};

class PclRPCIfFactory {
 public:
  typedef PclRPCIf Handler;

  virtual ~PclRPCIfFactory() {}

  virtual PclRPCIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PclRPCIf* /* handler */) = 0;
};

class PclRPCIfSingletonFactory : virtual public PclRPCIfFactory {
 public:
  PclRPCIfSingletonFactory(const ::std::shared_ptr<PclRPCIf>& iface) : iface_(iface) {}
  virtual ~PclRPCIfSingletonFactory() {}

  virtual PclRPCIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PclRPCIf* /* handler */) {}

 protected:
  ::std::shared_ptr<PclRPCIf> iface_;
};

class PclRPCNull : virtual public PclRPCIf {
 public:
  virtual ~PclRPCNull() {}
  void pclQuery(PclResult& /* _return */, const PclQueryArgs& /* query */) {
    return;
  }
  int64_t pclQueryAsync(const PclQueryArgs& /* query */) {
    int64_t _return = 0;
    return _return;
  }
  void getQueryResult(PclResult& /* _return */, const int64_t /* taskId */, const bool /* block */) {
    return;
  }
  bool isQueryComplete(const int64_t /* taskId */) {
    bool _return = false;
    return _return;
  }
  int32_t getRpcVersion() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _PclRPC_pclQuery_args__isset {
  _PclRPC_pclQuery_args__isset() : query(false) {}
  bool query :1;
} _PclRPC_pclQuery_args__isset;

class PclRPC_pclQuery_args {
 public:

  PclRPC_pclQuery_args(const PclRPC_pclQuery_args&);
  PclRPC_pclQuery_args& operator=(const PclRPC_pclQuery_args&);
  PclRPC_pclQuery_args() {
  }

  virtual ~PclRPC_pclQuery_args() noexcept;
  PclQueryArgs query;

  _PclRPC_pclQuery_args__isset __isset;

  void __set_query(const PclQueryArgs& val);

  bool operator == (const PclRPC_pclQuery_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const PclRPC_pclQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_pclQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_pclQuery_pargs {
 public:


  virtual ~PclRPC_pclQuery_pargs() noexcept;
  const PclQueryArgs* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_pclQuery_result__isset {
  _PclRPC_pclQuery_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_pclQuery_result__isset;

class PclRPC_pclQuery_result {
 public:

  PclRPC_pclQuery_result(const PclRPC_pclQuery_result&);
  PclRPC_pclQuery_result& operator=(const PclRPC_pclQuery_result&);
  PclRPC_pclQuery_result() {
  }

  virtual ~PclRPC_pclQuery_result() noexcept;
  PclResult success;

  _PclRPC_pclQuery_result__isset __isset;

  void __set_success(const PclResult& val);

  bool operator == (const PclRPC_pclQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_pclQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_pclQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_pclQuery_presult__isset {
  _PclRPC_pclQuery_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_pclQuery_presult__isset;

class PclRPC_pclQuery_presult {
 public:


  virtual ~PclRPC_pclQuery_presult() noexcept;
  PclResult* success;

  _PclRPC_pclQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PclRPC_pclQueryAsync_args__isset {
  _PclRPC_pclQueryAsync_args__isset() : query(false) {}
  bool query :1;
} _PclRPC_pclQueryAsync_args__isset;

class PclRPC_pclQueryAsync_args {
 public:

  PclRPC_pclQueryAsync_args(const PclRPC_pclQueryAsync_args&);
  PclRPC_pclQueryAsync_args& operator=(const PclRPC_pclQueryAsync_args&);
  PclRPC_pclQueryAsync_args() {
  }

  virtual ~PclRPC_pclQueryAsync_args() noexcept;
  PclQueryArgs query;

  _PclRPC_pclQueryAsync_args__isset __isset;

  void __set_query(const PclQueryArgs& val);

  bool operator == (const PclRPC_pclQueryAsync_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const PclRPC_pclQueryAsync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_pclQueryAsync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_pclQueryAsync_pargs {
 public:


  virtual ~PclRPC_pclQueryAsync_pargs() noexcept;
  const PclQueryArgs* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_pclQueryAsync_result__isset {
  _PclRPC_pclQueryAsync_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_pclQueryAsync_result__isset;

class PclRPC_pclQueryAsync_result {
 public:

  PclRPC_pclQueryAsync_result(const PclRPC_pclQueryAsync_result&);
  PclRPC_pclQueryAsync_result& operator=(const PclRPC_pclQueryAsync_result&);
  PclRPC_pclQueryAsync_result() : success(0) {
  }

  virtual ~PclRPC_pclQueryAsync_result() noexcept;
  int64_t success;

  _PclRPC_pclQueryAsync_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const PclRPC_pclQueryAsync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_pclQueryAsync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_pclQueryAsync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_pclQueryAsync_presult__isset {
  _PclRPC_pclQueryAsync_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_pclQueryAsync_presult__isset;

class PclRPC_pclQueryAsync_presult {
 public:


  virtual ~PclRPC_pclQueryAsync_presult() noexcept;
  int64_t* success;

  _PclRPC_pclQueryAsync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PclRPC_getQueryResult_args__isset {
  _PclRPC_getQueryResult_args__isset() : taskId(false), block(true) {}
  bool taskId :1;
  bool block :1;
} _PclRPC_getQueryResult_args__isset;

class PclRPC_getQueryResult_args {
 public:

  PclRPC_getQueryResult_args(const PclRPC_getQueryResult_args&);
  PclRPC_getQueryResult_args& operator=(const PclRPC_getQueryResult_args&);
  PclRPC_getQueryResult_args() : taskId(0), block(true) {
  }

  virtual ~PclRPC_getQueryResult_args() noexcept;
  int64_t taskId;
  bool block;

  _PclRPC_getQueryResult_args__isset __isset;

  void __set_taskId(const int64_t val);

  void __set_block(const bool val);

  bool operator == (const PclRPC_getQueryResult_args & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    if (!(block == rhs.block))
      return false;
    return true;
  }
  bool operator != (const PclRPC_getQueryResult_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_getQueryResult_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_getQueryResult_pargs {
 public:


  virtual ~PclRPC_getQueryResult_pargs() noexcept;
  const int64_t* taskId;
  const bool* block;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_getQueryResult_result__isset {
  _PclRPC_getQueryResult_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_getQueryResult_result__isset;

class PclRPC_getQueryResult_result {
 public:

  PclRPC_getQueryResult_result(const PclRPC_getQueryResult_result&);
  PclRPC_getQueryResult_result& operator=(const PclRPC_getQueryResult_result&);
  PclRPC_getQueryResult_result() {
  }

  virtual ~PclRPC_getQueryResult_result() noexcept;
  PclResult success;

  _PclRPC_getQueryResult_result__isset __isset;

  void __set_success(const PclResult& val);

  bool operator == (const PclRPC_getQueryResult_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_getQueryResult_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_getQueryResult_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_getQueryResult_presult__isset {
  _PclRPC_getQueryResult_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_getQueryResult_presult__isset;

class PclRPC_getQueryResult_presult {
 public:


  virtual ~PclRPC_getQueryResult_presult() noexcept;
  PclResult* success;

  _PclRPC_getQueryResult_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _PclRPC_isQueryComplete_args__isset {
  _PclRPC_isQueryComplete_args__isset() : taskId(false) {}
  bool taskId :1;
} _PclRPC_isQueryComplete_args__isset;

class PclRPC_isQueryComplete_args {
 public:

  PclRPC_isQueryComplete_args(const PclRPC_isQueryComplete_args&);
  PclRPC_isQueryComplete_args& operator=(const PclRPC_isQueryComplete_args&);
  PclRPC_isQueryComplete_args() : taskId(0) {
  }

  virtual ~PclRPC_isQueryComplete_args() noexcept;
  int64_t taskId;

  _PclRPC_isQueryComplete_args__isset __isset;

  void __set_taskId(const int64_t val);

  bool operator == (const PclRPC_isQueryComplete_args & rhs) const
  {
    if (!(taskId == rhs.taskId))
      return false;
    return true;
  }
  bool operator != (const PclRPC_isQueryComplete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_isQueryComplete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_isQueryComplete_pargs {
 public:


  virtual ~PclRPC_isQueryComplete_pargs() noexcept;
  const int64_t* taskId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_isQueryComplete_result__isset {
  _PclRPC_isQueryComplete_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_isQueryComplete_result__isset;

class PclRPC_isQueryComplete_result {
 public:

  PclRPC_isQueryComplete_result(const PclRPC_isQueryComplete_result&);
  PclRPC_isQueryComplete_result& operator=(const PclRPC_isQueryComplete_result&);
  PclRPC_isQueryComplete_result() : success(0) {
  }

  virtual ~PclRPC_isQueryComplete_result() noexcept;
  bool success;

  _PclRPC_isQueryComplete_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const PclRPC_isQueryComplete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_isQueryComplete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_isQueryComplete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_isQueryComplete_presult__isset {
  _PclRPC_isQueryComplete_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_isQueryComplete_presult__isset;

class PclRPC_isQueryComplete_presult {
 public:


  virtual ~PclRPC_isQueryComplete_presult() noexcept;
  bool* success;

  _PclRPC_isQueryComplete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PclRPC_getRpcVersion_args {
 public:

  PclRPC_getRpcVersion_args(const PclRPC_getRpcVersion_args&);
  PclRPC_getRpcVersion_args& operator=(const PclRPC_getRpcVersion_args&);
  PclRPC_getRpcVersion_args() {
  }

  virtual ~PclRPC_getRpcVersion_args() noexcept;

  bool operator == (const PclRPC_getRpcVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PclRPC_getRpcVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_getRpcVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_getRpcVersion_pargs {
 public:


  virtual ~PclRPC_getRpcVersion_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_getRpcVersion_result__isset {
  _PclRPC_getRpcVersion_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_getRpcVersion_result__isset;

class PclRPC_getRpcVersion_result {
 public:

  PclRPC_getRpcVersion_result(const PclRPC_getRpcVersion_result&);
  PclRPC_getRpcVersion_result& operator=(const PclRPC_getRpcVersion_result&);
  PclRPC_getRpcVersion_result() : success(0) {
  }

  virtual ~PclRPC_getRpcVersion_result() noexcept;
  int32_t success;

  _PclRPC_getRpcVersion_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PclRPC_getRpcVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_getRpcVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_getRpcVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_getRpcVersion_presult__isset {
  _PclRPC_getRpcVersion_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_getRpcVersion_presult__isset;

class PclRPC_getRpcVersion_presult {
 public:


  virtual ~PclRPC_getRpcVersion_presult() noexcept;
  int32_t* success;

  _PclRPC_getRpcVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class PclRPC_ping_args {
 public:

  PclRPC_ping_args(const PclRPC_ping_args&);
  PclRPC_ping_args& operator=(const PclRPC_ping_args&);
  PclRPC_ping_args() {
  }

  virtual ~PclRPC_ping_args() noexcept;

  bool operator == (const PclRPC_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PclRPC_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class PclRPC_ping_pargs {
 public:


  virtual ~PclRPC_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_ping_result__isset {
  _PclRPC_ping_result__isset() : success(false) {}
  bool success :1;
} _PclRPC_ping_result__isset;

class PclRPC_ping_result {
 public:

  PclRPC_ping_result(const PclRPC_ping_result&);
  PclRPC_ping_result& operator=(const PclRPC_ping_result&);
  PclRPC_ping_result() : success(0) {
  }

  virtual ~PclRPC_ping_result() noexcept;
  int32_t success;

  _PclRPC_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PclRPC_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PclRPC_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclRPC_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _PclRPC_ping_presult__isset {
  _PclRPC_ping_presult__isset() : success(false) {}
  bool success :1;
} _PclRPC_ping_presult__isset;

class PclRPC_ping_presult {
 public:


  virtual ~PclRPC_ping_presult() noexcept;
  int32_t* success;

  _PclRPC_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class PclRPCClient : virtual public PclRPCIf {
 public:
  PclRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PclRPCClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pclQuery(PclResult& _return, const PclQueryArgs& query);
  void send_pclQuery(const PclQueryArgs& query);
  void recv_pclQuery(PclResult& _return);
  int64_t pclQueryAsync(const PclQueryArgs& query);
  void send_pclQueryAsync(const PclQueryArgs& query);
  int64_t recv_pclQueryAsync();
  void getQueryResult(PclResult& _return, const int64_t taskId, const bool block);
  void send_getQueryResult(const int64_t taskId, const bool block);
  void recv_getQueryResult(PclResult& _return);
  bool isQueryComplete(const int64_t taskId);
  void send_isQueryComplete(const int64_t taskId);
  bool recv_isQueryComplete();
  int32_t getRpcVersion();
  void send_getRpcVersion();
  int32_t recv_getRpcVersion();
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PclRPCProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<PclRPCIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PclRPCProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_pclQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pclQueryAsync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueryResult(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_isQueryComplete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRpcVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PclRPCProcessor(::std::shared_ptr<PclRPCIf> iface) :
    iface_(iface) {
    processMap_["pclQuery"] = &PclRPCProcessor::process_pclQuery;
    processMap_["pclQueryAsync"] = &PclRPCProcessor::process_pclQueryAsync;
    processMap_["getQueryResult"] = &PclRPCProcessor::process_getQueryResult;
    processMap_["isQueryComplete"] = &PclRPCProcessor::process_isQueryComplete;
    processMap_["getRpcVersion"] = &PclRPCProcessor::process_getRpcVersion;
    processMap_["ping"] = &PclRPCProcessor::process_ping;
  }

  virtual ~PclRPCProcessor() {}
};

class PclRPCProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PclRPCProcessorFactory(const ::std::shared_ptr< PclRPCIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< PclRPCIfFactory > handlerFactory_;
};

class PclRPCMultiface : virtual public PclRPCIf {
 public:
  PclRPCMultiface(std::vector<std::shared_ptr<PclRPCIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PclRPCMultiface() {}
 protected:
  std::vector<std::shared_ptr<PclRPCIf> > ifaces_;
  PclRPCMultiface() {}
  void add(::std::shared_ptr<PclRPCIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void pclQuery(PclResult& _return, const PclQueryArgs& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pclQuery(_return, query);
    }
    ifaces_[i]->pclQuery(_return, query);
    return;
  }

  int64_t pclQueryAsync(const PclQueryArgs& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pclQueryAsync(query);
    }
    return ifaces_[i]->pclQueryAsync(query);
  }

  void getQueryResult(PclResult& _return, const int64_t taskId, const bool block) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueryResult(_return, taskId, block);
    }
    ifaces_[i]->getQueryResult(_return, taskId, block);
    return;
  }

  bool isQueryComplete(const int64_t taskId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->isQueryComplete(taskId);
    }
    return ifaces_[i]->isQueryComplete(taskId);
  }

  int32_t getRpcVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRpcVersion();
    }
    return ifaces_[i]->getRpcVersion();
  }

  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class PclRPCConcurrentClient : virtual public PclRPCIf {
 public:
  PclRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  PclRPCConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void pclQuery(PclResult& _return, const PclQueryArgs& query);
  int32_t send_pclQuery(const PclQueryArgs& query);
  void recv_pclQuery(PclResult& _return, const int32_t seqid);
  int64_t pclQueryAsync(const PclQueryArgs& query);
  int32_t send_pclQueryAsync(const PclQueryArgs& query);
  int64_t recv_pclQueryAsync(const int32_t seqid);
  void getQueryResult(PclResult& _return, const int64_t taskId, const bool block);
  int32_t send_getQueryResult(const int64_t taskId, const bool block);
  void recv_getQueryResult(PclResult& _return, const int32_t seqid);
  bool isQueryComplete(const int64_t taskId);
  int32_t send_isQueryComplete(const int64_t taskId);
  bool recv_isQueryComplete(const int32_t seqid);
  int32_t getRpcVersion();
  int32_t send_getRpcVersion();
  int32_t recv_getRpcVersion(const int32_t seqid);
  int32_t ping();
  int32_t send_ping();
  int32_t recv_ping(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
