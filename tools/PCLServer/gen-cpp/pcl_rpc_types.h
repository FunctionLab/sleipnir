/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef pcl_rpc_TYPES_H
#define pcl_rpc_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace PclRPC {

struct PclStatus {
  enum type {
    Complete = 1,
    Incomplete = 2,
    Error = 3
  };
};

extern const std::map<int, const char*> _PclStatus_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const PclStatus::type& val);

std::string to_string(const PclStatus::type& val);

class PclSettings;

class PclQueryArgs;

class PclResult;

typedef struct _PclSettings__isset {
  _PclSettings__isset() : outputNormalized(true), outputGeneExpression(true), outputQueryExpression(true), outputGeneCoexpression(true), outputQueryCoexpression(true), rbp(true) {}
  bool outputNormalized :1;
  bool outputGeneExpression :1;
  bool outputQueryExpression :1;
  bool outputGeneCoexpression :1;
  bool outputQueryCoexpression :1;
  bool rbp :1;
} _PclSettings__isset;

class PclSettings : public virtual ::apache::thrift::TBase {
 public:

  PclSettings(const PclSettings&);
  PclSettings& operator=(const PclSettings&);
  PclSettings() : outputNormalized(false), outputGeneExpression(false), outputQueryExpression(false), outputGeneCoexpression(false), outputQueryCoexpression(false), rbp(0.9900000000000000) {
  }

  virtual ~PclSettings() noexcept;
  bool outputNormalized;
  bool outputGeneExpression;
  bool outputQueryExpression;
  bool outputGeneCoexpression;
  bool outputQueryCoexpression;
  double rbp;

  _PclSettings__isset __isset;

  void __set_outputNormalized(const bool val);

  void __set_outputGeneExpression(const bool val);

  void __set_outputQueryExpression(const bool val);

  void __set_outputGeneCoexpression(const bool val);

  void __set_outputQueryCoexpression(const bool val);

  void __set_rbp(const double val);

  bool operator == (const PclSettings & rhs) const
  {
    if (__isset.outputNormalized != rhs.__isset.outputNormalized)
      return false;
    else if (__isset.outputNormalized && !(outputNormalized == rhs.outputNormalized))
      return false;
    if (__isset.outputGeneExpression != rhs.__isset.outputGeneExpression)
      return false;
    else if (__isset.outputGeneExpression && !(outputGeneExpression == rhs.outputGeneExpression))
      return false;
    if (__isset.outputQueryExpression != rhs.__isset.outputQueryExpression)
      return false;
    else if (__isset.outputQueryExpression && !(outputQueryExpression == rhs.outputQueryExpression))
      return false;
    if (__isset.outputGeneCoexpression != rhs.__isset.outputGeneCoexpression)
      return false;
    else if (__isset.outputGeneCoexpression && !(outputGeneCoexpression == rhs.outputGeneCoexpression))
      return false;
    if (__isset.outputQueryCoexpression != rhs.__isset.outputQueryCoexpression)
      return false;
    else if (__isset.outputQueryCoexpression && !(outputQueryCoexpression == rhs.outputQueryCoexpression))
      return false;
    if (__isset.rbp != rhs.__isset.rbp)
      return false;
    else if (__isset.rbp && !(rbp == rhs.rbp))
      return false;
    return true;
  }
  bool operator != (const PclSettings &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclSettings & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclSettings &a, PclSettings &b);

std::ostream& operator<<(std::ostream& out, const PclSettings& obj);

typedef struct _PclQueryArgs__isset {
  _PclQueryArgs__isset() : genes(false), queryGenes(false), settings(false), outputDir(true) {}
  bool genes :1;
  bool queryGenes :1;
  bool settings :1;
  bool outputDir :1;
} _PclQueryArgs__isset;

class PclQueryArgs : public virtual ::apache::thrift::TBase {
 public:

  PclQueryArgs(const PclQueryArgs&);
  PclQueryArgs& operator=(const PclQueryArgs&);
  PclQueryArgs() : species("Unknown"), outputDir("/tmp/seek") {
  }

  virtual ~PclQueryArgs() noexcept;
  std::string species;
  std::vector<std::string>  datasets;
  std::vector<std::string>  genes;
  std::vector<std::string>  queryGenes;
  PclSettings settings;
  std::string outputDir;

  _PclQueryArgs__isset __isset;

  void __set_species(const std::string& val);

  void __set_datasets(const std::vector<std::string> & val);

  void __set_genes(const std::vector<std::string> & val);

  void __set_queryGenes(const std::vector<std::string> & val);

  void __set_settings(const PclSettings& val);

  void __set_outputDir(const std::string& val);

  bool operator == (const PclQueryArgs & rhs) const
  {
    if (!(species == rhs.species))
      return false;
    if (!(datasets == rhs.datasets))
      return false;
    if (__isset.genes != rhs.__isset.genes)
      return false;
    else if (__isset.genes && !(genes == rhs.genes))
      return false;
    if (__isset.queryGenes != rhs.__isset.queryGenes)
      return false;
    else if (__isset.queryGenes && !(queryGenes == rhs.queryGenes))
      return false;
    if (__isset.settings != rhs.__isset.settings)
      return false;
    else if (__isset.settings && !(settings == rhs.settings))
      return false;
    if (__isset.outputDir != rhs.__isset.outputDir)
      return false;
    else if (__isset.outputDir && !(outputDir == rhs.outputDir))
      return false;
    return true;
  }
  bool operator != (const PclQueryArgs &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclQueryArgs & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclQueryArgs &a, PclQueryArgs &b);

std::ostream& operator<<(std::ostream& out, const PclQueryArgs& obj);

typedef struct _PclResult__isset {
  _PclResult__isset() : geneExpressions(false), geneCoexpressions(false), queryExpressions(false), queryCoexpressions(false), status(false), statusMsg(false) {}
  bool geneExpressions :1;
  bool geneCoexpressions :1;
  bool queryExpressions :1;
  bool queryCoexpressions :1;
  bool status :1;
  bool statusMsg :1;
} _PclResult__isset;

class PclResult : public virtual ::apache::thrift::TBase {
 public:

  PclResult(const PclResult&);
  PclResult& operator=(const PclResult&);
  PclResult() : success(0), status((PclStatus::type)0), statusMsg() {
  }

  virtual ~PclResult() noexcept;
  bool success;
  std::vector<int32_t>  datasetSizes;
  std::vector<double>  geneExpressions;
  std::vector<double>  geneCoexpressions;
  std::vector<double>  queryExpressions;
  std::vector<double>  queryCoexpressions;
  /**
   * 
   * @see PclStatus
   */
  PclStatus::type status;
  std::string statusMsg;

  _PclResult__isset __isset;

  void __set_success(const bool val);

  void __set_datasetSizes(const std::vector<int32_t> & val);

  void __set_geneExpressions(const std::vector<double> & val);

  void __set_geneCoexpressions(const std::vector<double> & val);

  void __set_queryExpressions(const std::vector<double> & val);

  void __set_queryCoexpressions(const std::vector<double> & val);

  void __set_status(const PclStatus::type val);

  void __set_statusMsg(const std::string& val);

  bool operator == (const PclResult & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(datasetSizes == rhs.datasetSizes))
      return false;
    if (__isset.geneExpressions != rhs.__isset.geneExpressions)
      return false;
    else if (__isset.geneExpressions && !(geneExpressions == rhs.geneExpressions))
      return false;
    if (__isset.geneCoexpressions != rhs.__isset.geneCoexpressions)
      return false;
    else if (__isset.geneCoexpressions && !(geneCoexpressions == rhs.geneCoexpressions))
      return false;
    if (__isset.queryExpressions != rhs.__isset.queryExpressions)
      return false;
    else if (__isset.queryExpressions && !(queryExpressions == rhs.queryExpressions))
      return false;
    if (__isset.queryCoexpressions != rhs.__isset.queryCoexpressions)
      return false;
    else if (__isset.queryCoexpressions && !(queryCoexpressions == rhs.queryCoexpressions))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    return true;
  }
  bool operator != (const PclResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PclResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PclResult &a, PclResult &b);

std::ostream& operator<<(std::ostream& out, const PclResult& obj);

} // namespace

#endif
