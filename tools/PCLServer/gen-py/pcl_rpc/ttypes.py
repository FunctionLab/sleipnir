#
# Autogenerated by Thrift Compiler (0.14.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PclStatus(object):
    Complete = 1
    Incomplete = 2
    Error = 3

    _VALUES_TO_NAMES = {
        1: "Complete",
        2: "Incomplete",
        3: "Error",
    }

    _NAMES_TO_VALUES = {
        "Complete": 1,
        "Incomplete": 2,
        "Error": 3,
    }


class PclSettings(object):
    """
    Attributes:
     - outputNormalized
     - outputGeneExpression
     - outputQueryExpression
     - outputGeneCoexpression
     - outputQueryCoexpression
     - rbp

    """


    def __init__(self, outputNormalized=False, outputGeneExpression=False, outputQueryExpression=False, outputGeneCoexpression=False, outputQueryCoexpression=False, rbp=0.9900000000000000,):
        self.outputNormalized = outputNormalized
        self.outputGeneExpression = outputGeneExpression
        self.outputQueryExpression = outputQueryExpression
        self.outputGeneCoexpression = outputGeneCoexpression
        self.outputQueryCoexpression = outputQueryCoexpression
        self.rbp = rbp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.outputNormalized = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.outputGeneExpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.outputQueryExpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.outputGeneCoexpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.outputQueryCoexpression = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.rbp = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclSettings')
        if self.outputNormalized is not None:
            oprot.writeFieldBegin('outputNormalized', TType.BOOL, 1)
            oprot.writeBool(self.outputNormalized)
            oprot.writeFieldEnd()
        if self.outputGeneExpression is not None:
            oprot.writeFieldBegin('outputGeneExpression', TType.BOOL, 2)
            oprot.writeBool(self.outputGeneExpression)
            oprot.writeFieldEnd()
        if self.outputQueryExpression is not None:
            oprot.writeFieldBegin('outputQueryExpression', TType.BOOL, 3)
            oprot.writeBool(self.outputQueryExpression)
            oprot.writeFieldEnd()
        if self.outputGeneCoexpression is not None:
            oprot.writeFieldBegin('outputGeneCoexpression', TType.BOOL, 4)
            oprot.writeBool(self.outputGeneCoexpression)
            oprot.writeFieldEnd()
        if self.outputQueryCoexpression is not None:
            oprot.writeFieldBegin('outputQueryCoexpression', TType.BOOL, 5)
            oprot.writeBool(self.outputQueryCoexpression)
            oprot.writeFieldEnd()
        if self.rbp is not None:
            oprot.writeFieldBegin('rbp', TType.DOUBLE, 6)
            oprot.writeDouble(self.rbp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PclQueryArgs(object):
    """
    Attributes:
     - species
     - datasets
     - genes
     - queryGenes
     - settings
     - outputDir

    """


    def __init__(self, species="Unknown", datasets=None, genes=None, queryGenes=None, settings=None, outputDir="/tmp/seek",):
        self.species = species
        self.datasets = datasets
        self.genes = genes
        self.queryGenes = queryGenes
        self.settings = settings
        self.outputDir = outputDir

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.species = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.datasets = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.datasets.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.genes = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.genes.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.queryGenes = []
                    (_etype15, _size12) = iprot.readListBegin()
                    for _i16 in range(_size12):
                        _elem17 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.queryGenes.append(_elem17)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.settings = PclSettings()
                    self.settings.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.outputDir = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclQueryArgs')
        if self.species is not None:
            oprot.writeFieldBegin('species', TType.STRING, 1)
            oprot.writeString(self.species.encode('utf-8') if sys.version_info[0] == 2 else self.species)
            oprot.writeFieldEnd()
        if self.datasets is not None:
            oprot.writeFieldBegin('datasets', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.datasets))
            for iter18 in self.datasets:
                oprot.writeString(iter18.encode('utf-8') if sys.version_info[0] == 2 else iter18)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.genes is not None:
            oprot.writeFieldBegin('genes', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.genes))
            for iter19 in self.genes:
                oprot.writeString(iter19.encode('utf-8') if sys.version_info[0] == 2 else iter19)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryGenes is not None:
            oprot.writeFieldBegin('queryGenes', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.queryGenes))
            for iter20 in self.queryGenes:
                oprot.writeString(iter20.encode('utf-8') if sys.version_info[0] == 2 else iter20)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.settings is not None:
            oprot.writeFieldBegin('settings', TType.STRUCT, 5)
            self.settings.write(oprot)
            oprot.writeFieldEnd()
        if self.outputDir is not None:
            oprot.writeFieldBegin('outputDir', TType.STRING, 6)
            oprot.writeString(self.outputDir.encode('utf-8') if sys.version_info[0] == 2 else self.outputDir)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.species is None:
            raise TProtocolException(message='Required field species is unset!')
        if self.datasets is None:
            raise TProtocolException(message='Required field datasets is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PclResult(object):
    """
    Attributes:
     - success
     - datasetSizes
     - geneExpressions
     - geneCoexpressions
     - queryExpressions
     - queryCoexpressions
     - status
     - statusMsg

    """


    def __init__(self, success=None, datasetSizes=None, geneExpressions=None, geneCoexpressions=None, queryExpressions=None, queryCoexpressions=None, status=None, statusMsg=None,):
        self.success = success
        self.datasetSizes = datasetSizes
        self.geneExpressions = geneExpressions
        self.geneCoexpressions = geneCoexpressions
        self.queryExpressions = queryExpressions
        self.queryCoexpressions = queryCoexpressions
        self.status = status
        self.statusMsg = statusMsg

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.datasetSizes = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = iprot.readI32()
                        self.datasetSizes.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.geneExpressions = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readDouble()
                        self.geneExpressions.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.geneCoexpressions = []
                    (_etype36, _size33) = iprot.readListBegin()
                    for _i37 in range(_size33):
                        _elem38 = iprot.readDouble()
                        self.geneCoexpressions.append(_elem38)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.queryExpressions = []
                    (_etype42, _size39) = iprot.readListBegin()
                    for _i43 in range(_size39):
                        _elem44 = iprot.readDouble()
                        self.queryExpressions.append(_elem44)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.queryCoexpressions = []
                    (_etype48, _size45) = iprot.readListBegin()
                    for _i49 in range(_size45):
                        _elem50 = iprot.readDouble()
                        self.queryCoexpressions.append(_elem50)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.status = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.statusMsg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PclResult')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 1)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.datasetSizes is not None:
            oprot.writeFieldBegin('datasetSizes', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.datasetSizes))
            for iter51 in self.datasetSizes:
                oprot.writeI32(iter51)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneExpressions is not None:
            oprot.writeFieldBegin('geneExpressions', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.geneExpressions))
            for iter52 in self.geneExpressions:
                oprot.writeDouble(iter52)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.geneCoexpressions is not None:
            oprot.writeFieldBegin('geneCoexpressions', TType.LIST, 4)
            oprot.writeListBegin(TType.DOUBLE, len(self.geneCoexpressions))
            for iter53 in self.geneCoexpressions:
                oprot.writeDouble(iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryExpressions is not None:
            oprot.writeFieldBegin('queryExpressions', TType.LIST, 5)
            oprot.writeListBegin(TType.DOUBLE, len(self.queryExpressions))
            for iter54 in self.queryExpressions:
                oprot.writeDouble(iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.queryCoexpressions is not None:
            oprot.writeFieldBegin('queryCoexpressions', TType.LIST, 6)
            oprot.writeListBegin(TType.DOUBLE, len(self.queryCoexpressions))
            for iter55 in self.queryCoexpressions:
                oprot.writeDouble(iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I32, 7)
            oprot.writeI32(self.status)
            oprot.writeFieldEnd()
        if self.statusMsg is not None:
            oprot.writeFieldBegin('statusMsg', TType.STRING, 8)
            oprot.writeString(self.statusMsg.encode('utf-8') if sys.version_info[0] == 2 else self.statusMsg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.success is None:
            raise TProtocolException(message='Required field success is unset!')
        if self.datasetSizes is None:
            raise TProtocolException(message='Required field datasetSizes is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(PclSettings)
PclSettings.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'outputNormalized', None, False, ),  # 1
    (2, TType.BOOL, 'outputGeneExpression', None, False, ),  # 2
    (3, TType.BOOL, 'outputQueryExpression', None, False, ),  # 3
    (4, TType.BOOL, 'outputGeneCoexpression', None, False, ),  # 4
    (5, TType.BOOL, 'outputQueryCoexpression', None, False, ),  # 5
    (6, TType.DOUBLE, 'rbp', None, 0.9900000000000000, ),  # 6
)
all_structs.append(PclQueryArgs)
PclQueryArgs.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'species', 'UTF8', "Unknown", ),  # 1
    (2, TType.LIST, 'datasets', (TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'genes', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.LIST, 'queryGenes', (TType.STRING, 'UTF8', False), None, ),  # 4
    (5, TType.STRUCT, 'settings', [PclSettings, None], None, ),  # 5
    (6, TType.STRING, 'outputDir', 'UTF8', "/tmp/seek", ),  # 6
)
all_structs.append(PclResult)
PclResult.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'success', None, None, ),  # 1
    (2, TType.LIST, 'datasetSizes', (TType.I32, None, False), None, ),  # 2
    (3, TType.LIST, 'geneExpressions', (TType.DOUBLE, None, False), None, ),  # 3
    (4, TType.LIST, 'geneCoexpressions', (TType.DOUBLE, None, False), None, ),  # 4
    (5, TType.LIST, 'queryExpressions', (TType.DOUBLE, None, False), None, ),  # 5
    (6, TType.LIST, 'queryCoexpressions', (TType.DOUBLE, None, False), None, ),  # 6
    (7, TType.I32, 'status', None, None, ),  # 7
    (8, TType.STRING, 'statusMsg', 'UTF8', None, ),  # 8
)
fix_spec(all_structs)
del all_structs
